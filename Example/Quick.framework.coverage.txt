/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator10.0.sdk/usr/include/dispatch/once.h:
       |    1|/*
       |    2| * Copyright (c) 2008-2010 Apple Inc. All rights reserved.
       |    3| *
       |    4| * @APPLE_APACHE_LICENSE_HEADER_START@
       |    5| *
       |    6| * Licensed under the Apache License, Version 2.0 (the "License");
       |    7| * you may not use this file except in compliance with the License.
       |    8| * You may obtain a copy of the License at
       |    9| *
       |   10| *     http://www.apache.org/licenses/LICENSE-2.0
       |   11| *
       |   12| * Unless required by applicable law or agreed to in writing, software
       |   13| * distributed under the License is distributed on an "AS IS" BASIS,
       |   14| * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       |   15| * See the License for the specific language governing permissions and
       |   16| * limitations under the License.
       |   17| *
       |   18| * @APPLE_APACHE_LICENSE_HEADER_END@
       |   19| */
       |   20|
       |   21|#ifndef __DISPATCH_ONCE__
       |   22|#define __DISPATCH_ONCE__
       |   23|
       |   24|#ifndef __DISPATCH_INDIRECT__
       |   25|#error "Please #include <dispatch/dispatch.h> instead of this file directly."
       |   26|#include <dispatch/base.h> // for HeaderDoc
       |   27|#endif
       |   28|
       |   29|DISPATCH_ASSUME_NONNULL_BEGIN
       |   30|
       |   31|__BEGIN_DECLS
       |   32|
       |   33|/*!
       |   34| * @typedef dispatch_once_t
       |   35| *
       |   36| * @abstract
       |   37| * A predicate for use with dispatch_once(). It must be initialized to zero.
       |   38| * Note: static and global variables default to zero.
       |   39| */
       |   40|DISPATCH_SWIFT3_UNAVAILABLE("Use lazily initialized globals instead")
       |   41|typedef long dispatch_once_t;
       |   42|
       |   43|/*!
       |   44| * @function dispatch_once
       |   45| *
       |   46| * @abstract
       |   47| * Execute a block once and only once.
       |   48| *
       |   49| * @param predicate
       |   50| * A pointer to a dispatch_once_t that is used to test whether the block has
       |   51| * completed or not.
       |   52| *
       |   53| * @param block
       |   54| * The block to execute once.
       |   55| *
       |   56| * @discussion
       |   57| * Always call dispatch_once() before using or testing any variables that are
       |   58| * initialized by the block.
       |   59| */
       |   60|#ifdef __BLOCKS__
       |   61|__OSX_AVAILABLE_STARTING(__MAC_10_6,__IPHONE_4_0)
       |   62|DISPATCH_EXPORT DISPATCH_NONNULL_ALL DISPATCH_NOTHROW
       |   63|DISPATCH_SWIFT3_UNAVAILABLE("Use lazily initialized globals instead")
       |   64|void
       |   65|dispatch_once(dispatch_once_t *predicate,
       |   66|		DISPATCH_NOESCAPE dispatch_block_t block);
       |   67|
       |   68|DISPATCH_INLINE DISPATCH_ALWAYS_INLINE DISPATCH_NONNULL_ALL DISPATCH_NOTHROW
       |   69|DISPATCH_SWIFT3_UNAVAILABLE("Use lazily initialized globals instead")
       |   70|void
       |   71|_dispatch_once(dispatch_once_t *predicate,
       |   72|		DISPATCH_NOESCAPE dispatch_block_t block)
       |   73|{
       |   74|	if (DISPATCH_EXPECT(*predicate, ~0l) != ~0l) {
       |   75|		dispatch_once(predicate, block);
       |   76|	} else {
       |   77|		dispatch_compiler_barrier();
       |   78|	}
       |   79|	DISPATCH_COMPILER_CAN_ASSUME(*predicate == ~0l);
       |   80|}
       |   81|#undef dispatch_once
     31|   82|#define dispatch_once _dispatch_once
       |   83|#endif
       |   84|
       |   85|__OSX_AVAILABLE_STARTING(__MAC_10_6,__IPHONE_4_0)
       |   86|DISPATCH_EXPORT DISPATCH_NONNULL1 DISPATCH_NONNULL3 DISPATCH_NOTHROW
       |   87|DISPATCH_SWIFT3_UNAVAILABLE("Use lazily initialized globals instead")
       |   88|void
       |   89|dispatch_once_f(dispatch_once_t *predicate, void *_Nullable context,
       |   90|		dispatch_function_t function);
       |   91|
       |   92|DISPATCH_INLINE DISPATCH_ALWAYS_INLINE DISPATCH_NONNULL1 DISPATCH_NONNULL3
       |   93|DISPATCH_NOTHROW
       |   94|DISPATCH_SWIFT3_UNAVAILABLE("Use lazily initialized globals instead")
       |   95|void
       |   96|_dispatch_once_f(dispatch_once_t *predicate, void *_Nullable context,
       |   97|		dispatch_function_t function)
       |   98|{
       |   99|	if (DISPATCH_EXPECT(*predicate, ~0l) != ~0l) {
       |  100|		dispatch_once_f(predicate, context, function);
       |  101|	} else {
       |  102|		dispatch_compiler_barrier();
       |  103|	}
       |  104|	DISPATCH_COMPILER_CAN_ASSUME(*predicate == ~0l);
       |  105|}
       |  106|#undef dispatch_once_f
       |  107|#define dispatch_once_f _dispatch_once_f
       |  108|
       |  109|__END_DECLS
       |  110|
       |  111|DISPATCH_ASSUME_NONNULL_END
       |  112|
       |  113|#endif

/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator10.0.sdk/usr/include/objc/objc.h:
       |    1|/*
       |    2| * Copyright (c) 1999-2007 Apple Inc.  All Rights Reserved.
       |    3| * 
       |    4| * @APPLE_LICENSE_HEADER_START@
       |    5| * 
       |    6| * This file contains Original Code and/or Modifications of Original Code
       |    7| * as defined in and that are subject to the Apple Public Source License
       |    8| * Version 2.0 (the 'License'). You may not use this file except in
       |    9| * compliance with the License. Please obtain a copy of the License at
       |   10| * http://www.opensource.apple.com/apsl/ and read it before using this
       |   11| * file.
       |   12| * 
       |   13| * The Original Code and all software distributed under the License are
       |   14| * distributed on an 'AS IS' basis, WITHOUT WARRANTY OF ANY KIND, EITHER
       |   15| * EXPRESS OR IMPLIED, AND APPLE HEREBY DISCLAIMS ALL SUCH WARRANTIES,
       |   16| * INCLUDING WITHOUT LIMITATION, ANY WARRANTIES OF MERCHANTABILITY,
       |   17| * FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT OR NON-INFRINGEMENT.
       |   18| * Please see the License for the specific language governing rights and
       |   19| * limitations under the License.
       |   20| * 
       |   21| * @APPLE_LICENSE_HEADER_END@
       |   22| */
       |   23|/*
       |   24| *	objc.h
       |   25| *	Copyright 1988-1996, NeXT Software, Inc.
       |   26| */
       |   27|
       |   28|#ifndef _OBJC_OBJC_H_
       |   29|#define _OBJC_OBJC_H_
       |   30|
       |   31|#include <sys/types.h>      // for __DARWIN_NULL
       |   32|#include <Availability.h>
       |   33|#include <objc/objc-api.h>
       |   34|#include <stdbool.h>
       |   35|
       |   36|#if !OBJC_TYPES_DEFINED
       |   37|/// An opaque type that represents an Objective-C class.
       |   38|typedef struct objc_class *Class;
       |   39|
       |   40|/// Represents an instance of a class.
       |   41|struct objc_object {
       |   42|    Class isa  OBJC_ISA_AVAILABILITY;
       |   43|};
       |   44|
       |   45|/// A pointer to an instance of a class.
       |   46|typedef struct objc_object *id;
       |   47|#endif
       |   48|
       |   49|/// An opaque type that represents a method selector.
       |   50|typedef struct objc_selector *SEL;
       |   51|
       |   52|/// A pointer to the function of a method implementation. 
       |   53|#if !OBJC_OLD_DISPATCH_PROTOTYPES
       |   54|typedef void (*IMP)(void /* id, SEL, ... */ ); 
       |   55|#else
       |   56|typedef id (*IMP)(id, SEL, ...); 
       |   57|#endif
       |   58|
       |   59|#define OBJC_BOOL_DEFINED
       |   60|
       |   61|/// Type to represent a boolean value.
       |   62|#if (TARGET_OS_IPHONE && __LP64__)  ||  TARGET_OS_WATCH
       |   63|#define OBJC_BOOL_IS_BOOL 1
       |   64|typedef bool BOOL;
       |   65|#else
       |   66|#define OBJC_BOOL_IS_CHAR 1
       |   67|typedef signed char BOOL; 
       |   68|// BOOL is explicitly signed so @encode(BOOL) == "c" rather than "C" 
       |   69|// even if -funsigned-char is used.
       |   70|#endif
       |   71|
       |   72|#if __has_feature(objc_bool)
       |   73|#define YES __objc_yes
       |   74|#define NO  __objc_no
       |   75|#else
       |   76|#define YES ((BOOL)1)
       |   77|#define NO  ((BOOL)0)
       |   78|#endif
       |   79|
       |   80|#ifndef Nil
       |   81|# if __has_feature(cxx_nullptr)
       |   82|#   define Nil nullptr
       |   83|# else
       |   84|#   define Nil __DARWIN_NULL
       |   85|# endif
       |   86|#endif
       |   87|
       |   88|#ifndef nil
       |   89|# if __has_feature(cxx_nullptr)
       |   90|#   define nil nullptr
       |   91|# else
     28|   92|#   define nil __DARWIN_NULL
       |   93|# endif
       |   94|#endif
       |   95|
       |   96|#ifndef __strong
       |   97|# if !__has_feature(objc_arc)
       |   98|#   define __strong /* empty */
       |   99|# endif
       |  100|#endif
       |  101|
       |  102|#ifndef __unsafe_unretained
       |  103|# if !__has_feature(objc_arc)
       |  104|#   define __unsafe_unretained /* empty */
       |  105|# endif
       |  106|#endif
       |  107|
       |  108|#ifndef __autoreleasing
       |  109|# if !__has_feature(objc_arc)
       |  110|#   define __autoreleasing /* empty */
       |  111|# endif
       |  112|#endif
       |  113|
       |  114|
       |  115|/** 
       |  116| * Returns the name of the method specified by a given selector.
       |  117| * 
       |  118| * @param sel A pointer of type \c SEL. Pass the selector whose name you wish to determine.
       |  119| * 
       |  120| * @return A C string indicating the name of the selector.
       |  121| */
       |  122|OBJC_EXPORT const char *sel_getName(SEL sel)
       |  123|    OBJC_AVAILABLE(10.0, 2.0, 9.0, 1.0);
       |  124|
       |  125|/** 
       |  126| * Registers a method with the Objective-C runtime system, maps the method 
       |  127| * name to a selector, and returns the selector value.
       |  128| * 
       |  129| * @param str A pointer to a C string. Pass the name of the method you wish to register.
       |  130| * 
       |  131| * @return A pointer of type SEL specifying the selector for the named method.
       |  132| * 
       |  133| * @note You must register a method name with the Objective-C runtime system to obtain the
       |  134| *  method’s selector before you can add the method to a class definition. If the method name
       |  135| *  has already been registered, this function simply returns the selector.
       |  136| */
       |  137|OBJC_EXPORT SEL sel_registerName(const char *str)
       |  138|    OBJC_AVAILABLE(10.0, 2.0, 9.0, 1.0);
       |  139|
       |  140|/** 
       |  141| * Returns the class name of a given object.
       |  142| * 
       |  143| * @param obj An Objective-C object.
       |  144| * 
       |  145| * @return The name of the class of which \e obj is an instance.
       |  146| */
       |  147|OBJC_EXPORT const char *object_getClassName(id obj)
       |  148|    OBJC_AVAILABLE(10.0, 2.0, 9.0, 1.0);
       |  149|
       |  150|/** 
       |  151| * Returns a pointer to any extra bytes allocated with an instance given object.
       |  152| * 
       |  153| * @param obj An Objective-C object.
       |  154| * 
       |  155| * @return A pointer to any extra bytes allocated with \e obj. If \e obj was
       |  156| *   not allocated with any extra bytes, then dereferencing the returned pointer is undefined.
       |  157| * 
       |  158| * @note This function returns a pointer to any extra bytes allocated with the instance
       |  159| *  (as specified by \c class_createInstance with extraBytes>0). This memory follows the
       |  160| *  object's ordinary ivars, but may not be adjacent to the last ivar.
       |  161| * @note The returned pointer is guaranteed to be pointer-size aligned, even if the area following
       |  162| *  the object's last ivar is less aligned than that. Alignment greater than pointer-size is never
       |  163| *  guaranteed, even if the area following the object's last ivar is more aligned than that.
       |  164| * @note In a garbage-collected environment, the memory is scanned conservatively.
       |  165| */
       |  166|OBJC_EXPORT void *object_getIndexedIvars(id obj)
       |  167|    OBJC_AVAILABLE(10.0, 2.0, 9.0, 1.0);
       |  168|
       |  169|/** 
       |  170| * Identifies a selector as being valid or invalid.
       |  171| * 
       |  172| * @param sel The selector you want to identify.
       |  173| * 
       |  174| * @return YES if selector is valid and has a function implementation, NO otherwise. 
       |  175| * 
       |  176| * @warning On some platforms, an invalid reference (to invalid memory addresses) can cause
       |  177| *  a crash. 
       |  178| */
       |  179|OBJC_EXPORT BOOL sel_isMapped(SEL sel)
       |  180|    OBJC_AVAILABLE(10.0, 2.0, 9.0, 1.0);
       |  181|
       |  182|/** 
       |  183| * Registers a method name with the Objective-C runtime system.
       |  184| * 
       |  185| * @param str A pointer to a C string. Pass the name of the method you wish to register.
       |  186| * 
       |  187| * @return A pointer of type SEL specifying the selector for the named method.
       |  188| * 
       |  189| * @note The implementation of this method is identical to the implementation of \c sel_registerName.
       |  190| * @note Prior to OS X version 10.0, this method tried to find the selector mapped to the given name
       |  191| *  and returned \c NULL if the selector was not found. This was changed for safety, because it was
       |  192| *  observed that many of the callers of this function did not check the return value for \c NULL.
       |  193| */
       |  194|OBJC_EXPORT SEL sel_getUid(const char *str)
       |  195|    OBJC_AVAILABLE(10.0, 2.0, 9.0, 1.0);
       |  196|
       |  197|typedef const void* objc_objectptr_t;
       |  198|
       |  199|
       |  200|// Obsolete ARC conversions.
       |  201|
       |  202|OBJC_EXPORT id objc_retainedObject(objc_objectptr_t obj)
       |  203|    OBJC_UNAVAILABLE("use CFBridgingRelease() or a (__bridge_transfer id) cast instead");
       |  204|OBJC_EXPORT id objc_unretainedObject(objc_objectptr_t obj)
       |  205|    OBJC_UNAVAILABLE("use a (__bridge id) cast instead");
       |  206|OBJC_EXPORT objc_objectptr_t objc_unretainedPointer(id obj)
       |  207|    OBJC_UNAVAILABLE("use a __bridge cast instead");
       |  208|
       |  209|
       |  210|#if !__OBJC2__
       |  211|
       |  212|// The following declarations are provided here for source compatibility.
       |  213|
       |  214|#if defined(__LP64__)
       |  215|    typedef long arith_t;
       |  216|    typedef unsigned long uarith_t;
       |  217|#   define ARITH_SHIFT 32
       |  218|#else
       |  219|    typedef int arith_t;
       |  220|    typedef unsigned uarith_t;
       |  221|#   define ARITH_SHIFT 16
       |  222|#endif
       |  223|
       |  224|typedef char *STR;
       |  225|
       |  226|#define ISSELECTOR(sel) sel_isMapped(sel)
       |  227|#define SELNAME(sel)	sel_getName(sel)
       |  228|#define SELUID(str)	sel_getUid(str)
       |  229|#define NAMEOF(obj)     object_getClassName(obj)
       |  230|#define IV(obj)         object_getIndexedIvars(obj)
       |  231|
       |  232|#endif
       |  233|
       |  234|#endif  /* _OBJC_OBJC_H_ */

/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator10.0.sdk/usr/include/sys/_types.h:
       |    1|/*
       |    2| * Copyright (c) 2003-2007 Apple Inc. All rights reserved.
       |    3| *
       |    4| * @APPLE_OSREFERENCE_LICENSE_HEADER_START@
       |    5| * 
       |    6| * This file contains Original Code and/or Modifications of Original Code
       |    7| * as defined in and that are subject to the Apple Public Source License
       |    8| * Version 2.0 (the 'License'). You may not use this file except in
       |    9| * compliance with the License. The rights granted to you under the License
       |   10| * may not be used to create, or enable the creation or redistribution of,
       |   11| * unlawful or unlicensed copies of an Apple operating system, or to
       |   12| * circumvent, violate, or enable the circumvention or violation of, any
       |   13| * terms of an Apple operating system software license agreement.
       |   14| * 
       |   15| * Please obtain a copy of the License at
       |   16| * http://www.opensource.apple.com/apsl/ and read it before using this file.
       |   17| * 
       |   18| * The Original Code and all software distributed under the License are
       |   19| * distributed on an 'AS IS' basis, WITHOUT WARRANTY OF ANY KIND, EITHER
       |   20| * EXPRESS OR IMPLIED, AND APPLE HEREBY DISCLAIMS ALL SUCH WARRANTIES,
       |   21| * INCLUDING WITHOUT LIMITATION, ANY WARRANTIES OF MERCHANTABILITY,
       |   22| * FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT OR NON-INFRINGEMENT.
       |   23| * Please see the License for the specific language governing rights and
       |   24| * limitations under the License.
       |   25| * 
       |   26| * @APPLE_OSREFERENCE_LICENSE_HEADER_END@
       |   27| */
       |   28|
       |   29|#ifndef _SYS__TYPES_H_
       |   30|#define _SYS__TYPES_H_
       |   31|
       |   32|#include <sys/cdefs.h>
       |   33|#include <machine/_types.h>
       |   34|
       |   35|/*
       |   36| * Type definitions; takes common type definitions that must be used
       |   37| * in multiple header files due to [XSI], removes them from the system
       |   38| * space, and puts them in the implementation space.
       |   39| */
       |   40|
       |   41|#ifdef __cplusplus
       |   42|#ifdef __GNUG__
       |   43|#define __DARWIN_NULL __null
       |   44|#else /* ! __GNUG__ */
       |   45|#ifdef __LP64__
       |   46|#define __DARWIN_NULL (0L)
       |   47|#else /* !__LP64__ */
       |   48|#define __DARWIN_NULL 0
       |   49|#endif /* __LP64__ */
       |   50|#endif /* __GNUG__ */
       |   51|#else /* ! __cplusplus */
     28|   52|#define __DARWIN_NULL ((void *)0)
       |   53|#endif /* __cplusplus */
       |   54|
       |   55|typedef	__int64_t	__darwin_blkcnt_t;	/* total blocks */
       |   56|typedef	__int32_t	__darwin_blksize_t;	/* preferred block size */
       |   57|typedef __int32_t	__darwin_dev_t;		/* dev_t */
       |   58|typedef unsigned int	__darwin_fsblkcnt_t;	/* Used by statvfs and fstatvfs */
       |   59|typedef unsigned int	__darwin_fsfilcnt_t;	/* Used by statvfs and fstatvfs */
       |   60|typedef __uint32_t	__darwin_gid_t;		/* [???] process and group IDs */
       |   61|typedef __uint32_t	__darwin_id_t;		/* [XSI] pid_t, uid_t, or gid_t*/
       |   62|typedef __uint64_t	__darwin_ino64_t;	/* [???] Used for 64 bit inodes */
       |   63|#if __DARWIN_64_BIT_INO_T
       |   64|typedef __darwin_ino64_t __darwin_ino_t;	/* [???] Used for inodes */
       |   65|#else /* !__DARWIN_64_BIT_INO_T */
       |   66|typedef __uint32_t	__darwin_ino_t;		/* [???] Used for inodes */
       |   67|#endif /* __DARWIN_64_BIT_INO_T */
       |   68|typedef __darwin_natural_t __darwin_mach_port_name_t; /* Used by mach */
       |   69|typedef __darwin_mach_port_name_t __darwin_mach_port_t; /* Used by mach */
       |   70|typedef __uint16_t	__darwin_mode_t;	/* [???] Some file attributes */
       |   71|typedef __int64_t	__darwin_off_t;		/* [???] Used for file sizes */
       |   72|typedef __int32_t	__darwin_pid_t;		/* [???] process and group IDs */
       |   73|typedef __uint32_t	__darwin_sigset_t;	/* [???] signal set */
       |   74|typedef __int32_t	__darwin_suseconds_t;	/* [???] microseconds */
       |   75|typedef __uint32_t	__darwin_uid_t;		/* [???] user IDs */
       |   76|typedef __uint32_t	__darwin_useconds_t;	/* [???] microseconds */
       |   77|typedef	unsigned char	__darwin_uuid_t[16];
       |   78|typedef	char	__darwin_uuid_string_t[37];
       |   79|
       |   80|#include <sys/_pthread/_pthread_types.h>
       |   81|
       |   82|#if defined(__GNUC__) && (__GNUC__ == 3 && __GNUC_MINOR__ >= 5 || __GNUC__ > 3)
       |   83|#define __offsetof(type, field) __builtin_offsetof(type, field)
       |   84|#else /* !(gcc >= 3.5) */
       |   85|#define __offsetof(type, field) ((size_t)(&((type *)0)->field))
       |   86|#endif /* (gcc >= 3.5) */
       |   87|
       |   88|
       |   89|#endif	/* _SYS__TYPES_H_ */

/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../lib/clang/8.0.0/include/stddef.h:
       |    1|/*===---- stddef.h - Basic type definitions --------------------------------===
       |    2| *
       |    3| * Copyright (c) 2008 Eli Friedman
       |    4| *
       |    5| * Permission is hereby granted, free of charge, to any person obtaining a copy
       |    6| * of this software and associated documentation files (the "Software"), to deal
       |    7| * in the Software without restriction, including without limitation the rights
       |    8| * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
       |    9| * copies of the Software, and to permit persons to whom the Software is
       |   10| * furnished to do so, subject to the following conditions:
       |   11| *
       |   12| * The above copyright notice and this permission notice shall be included in
       |   13| * all copies or substantial portions of the Software.
       |   14| *
       |   15| * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
       |   16| * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
       |   17| * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
       |   18| * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
       |   19| * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
       |   20| * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
       |   21| * THE SOFTWARE.
       |   22| *
       |   23| *===-----------------------------------------------------------------------===
       |   24| */
       |   25|
       |   26|#if !defined(__STDDEF_H) || defined(__need_ptrdiff_t) ||                       \
       |   27|    defined(__need_size_t) || defined(__need_wchar_t) ||                       \
       |   28|    defined(__need_NULL) || defined(__need_wint_t)
       |   29|
       |   30|#if !defined(__need_ptrdiff_t) && !defined(__need_size_t) &&                   \
       |   31|    !defined(__need_wchar_t) && !defined(__need_NULL) &&                       \
       |   32|    !defined(__need_wint_t)
       |   33|/* Always define miscellaneous pieces when modules are available. */
       |   34|#if !__has_feature(modules)
       |   35|#define __STDDEF_H
       |   36|#endif
       |   37|#define __need_ptrdiff_t
       |   38|#define __need_size_t
       |   39|#define __need_wchar_t
       |   40|#define __need_NULL
       |   41|#define __need_STDDEF_H_misc
       |   42|/* __need_wint_t is intentionally not defined here. */
       |   43|#endif
       |   44|
       |   45|#if defined(__need_ptrdiff_t)
       |   46|#if !defined(_PTRDIFF_T) || __has_feature(modules)
       |   47|/* Always define ptrdiff_t when modules are available. */
       |   48|#if !__has_feature(modules)
       |   49|#define _PTRDIFF_T
       |   50|#endif
       |   51|typedef __PTRDIFF_TYPE__ ptrdiff_t;
       |   52|#endif
       |   53|#undef __need_ptrdiff_t
       |   54|#endif /* defined(__need_ptrdiff_t) */
       |   55|
       |   56|#if defined(__need_size_t)
       |   57|#if !defined(_SIZE_T) || __has_feature(modules)
       |   58|/* Always define size_t when modules are available. */
       |   59|#if !__has_feature(modules)
       |   60|#define _SIZE_T
       |   61|#endif
       |   62|typedef __SIZE_TYPE__ size_t;
       |   63|#endif
       |   64|#undef __need_size_t
       |   65|#endif /*defined(__need_size_t) */
       |   66|
       |   67|#if defined(__need_STDDEF_H_misc)
       |   68|/* ISO9899:2011 7.20 (C11 Annex K): Define rsize_t if __STDC_WANT_LIB_EXT1__ is
       |   69| * enabled. */
       |   70|#if (defined(__STDC_WANT_LIB_EXT1__) && __STDC_WANT_LIB_EXT1__ >= 1 && \
       |   71|     !defined(_RSIZE_T)) || __has_feature(modules)
       |   72|/* Always define rsize_t when modules are available. */
       |   73|#if !__has_feature(modules)
       |   74|#define _RSIZE_T
       |   75|#endif
       |   76|typedef __SIZE_TYPE__ rsize_t;
       |   77|#endif
       |   78|#endif /* defined(__need_STDDEF_H_misc) */
       |   79|
       |   80|#if defined(__need_wchar_t)
       |   81|#ifndef __cplusplus
       |   82|/* Always define wchar_t when modules are available. */
       |   83|#if !defined(_WCHAR_T) || __has_feature(modules)
       |   84|#if !__has_feature(modules)
       |   85|#define _WCHAR_T
       |   86|#if defined(_MSC_EXTENSIONS)
       |   87|#define _WCHAR_T_DEFINED
       |   88|#endif
       |   89|#endif
       |   90|typedef __WCHAR_TYPE__ wchar_t;
       |   91|#endif
       |   92|#endif
       |   93|#undef __need_wchar_t
       |   94|#endif /* defined(__need_wchar_t) */
       |   95|
       |   96|#if defined(__need_NULL)
       |   97|#undef NULL
       |   98|#ifdef __cplusplus
       |   99|#  if !defined(__MINGW32__) && !defined(_MSC_VER)
       |  100|#    define NULL __null
       |  101|#  else
       |  102|#    define NULL 0
       |  103|#  endif
       |  104|#else
      2|  105|#  define NULL ((void*)0)
       |  106|#endif
       |  107|#ifdef __cplusplus
       |  108|#if defined(_MSC_EXTENSIONS) && defined(_NATIVE_NULLPTR_SUPPORTED)
       |  109|namespace std { typedef decltype(nullptr) nullptr_t; }
       |  110|using ::std::nullptr_t;
       |  111|#endif
       |  112|#endif
       |  113|#undef __need_NULL
       |  114|#endif /* defined(__need_NULL) */
       |  115|
       |  116|#if defined(__need_STDDEF_H_misc)
       |  117|#if __STDC_VERSION__ >= 201112L || __cplusplus >= 201103L
       |  118|#include "__stddef_max_align_t.h"
       |  119|#endif
       |  120|#define offsetof(t, d) __builtin_offsetof(t, d)
       |  121|#undef __need_STDDEF_H_misc
       |  122|#endif  /* defined(__need_STDDEF_H_misc) */
       |  123|
       |  124|/* Some C libraries expect to see a wint_t here. Others (notably MinGW) will use
       |  125|__WINT_TYPE__ directly; accommodate both by requiring __need_wint_t */
       |  126|#if defined(__need_wint_t)
       |  127|/* Always define wint_t when modules are available. */
       |  128|#if !defined(_WINT_T) || __has_feature(modules)
       |  129|#if !__has_feature(modules)
       |  130|#define _WINT_T
       |  131|#endif
       |  132|typedef __WINT_TYPE__ wint_t;
       |  133|#endif
       |  134|#undef __need_wint_t
       |  135|#endif /* __need_wint_t */
       |  136|
       |  137|#endif

/Users/wangjie/Developer/iOS/MyPods/KissPaginate/Example/Pods/Quick/Sources/Quick/Callsite.swift:
       |    1|import Foundation
       |    2|
       |    3|/**
       |    4|    An object encapsulating the file and line number at which
       |    5|    a particular example is defined.
       |    6|*/
       |    7|final public class Callsite: NSObject {
       |    8|    /**
       |    9|        The absolute path of the file in which an example is defined.
       |   10|    */
       |   11|    public let file: String
       |   12|
       |   13|    /**
       |   14|        The line number on which an example is defined.
       |   15|    */
       |   16|    public let line: UInt
       |   17|
     14|   18|    internal init(file: String, line: UInt) {
     14|   19|        self.file = file
     14|   20|        self.line = line
     14|   21|    }
       |   22|}
       |   23|
       |   24|/**
       |   25|    Returns a boolean indicating whether two Callsite objects are equal.
       |   26|    If two callsites are in the same file and on the same line, they must be equal.
       |   27|*/
      0|   28|public func ==(lhs: Callsite, rhs: Callsite) -> Bool {
      0|   29|    return lhs.file == rhs.file && lhs.line == rhs.line
      0|   30|}

/Users/wangjie/Developer/iOS/MyPods/KissPaginate/Example/Pods/Quick/Sources/Quick/Configuration/Configuration.swift:
       |    1|import Foundation
       |    2|
       |    3|/**
       |    4|    A closure that temporarily exposes a Configuration object within
       |    5|    the scope of the closure.
       |    6|*/
       |    7|public typealias QuickConfigurer = (configuration: Configuration) -> ()
       |    8|
       |    9|/**
       |   10|    A closure that, given metadata about an example, returns a boolean value
       |   11|    indicating whether that example should be run.
       |   12|*/
       |   13|public typealias ExampleFilter = (example: Example) -> Bool
       |   14|
       |   15|/**
       |   16|    A configuration encapsulates various options you can use
       |   17|    to configure Quick's behavior.
       |   18|*/
       |   19|final public class Configuration: NSObject {
       |   20|    internal let exampleHooks = ExampleHooks()
       |   21|    internal let suiteHooks = SuiteHooks()
     28|   22|    internal var exclusionFilters: [ExampleFilter] = [{ example in
      0|   23|        if let pending = example.filterFlags[Filter.pending] {
      0|   24|            return pending
     28|   25|        } else {
     28|   26|            return false
      0|   27|        }
      0|   28|    }]
    238|   29|    internal var inclusionFilters: [ExampleFilter] = [{ example in
      0|   30|        if let focused = example.filterFlags[Filter.focused] {
      0|   31|            return focused
    238|   32|        } else {
    238|   33|            return false
      0|   34|        }
      0|   35|    }]
       |   36|
       |   37|    /**
       |   38|        Run all examples if none match the configured filters. True by default.
       |   39|    */
       |   40|    public var runAllWhenEverythingFiltered = true
       |   41|
       |   42|    /**
       |   43|        Registers an inclusion filter.
       |   44|
       |   45|        All examples are filtered using all inclusion filters.
       |   46|        The remaining examples are run. If no examples remain, all examples are run.
       |   47|
       |   48|        - parameter filter: A filter that, given an example, returns a value indicating
       |   49|                       whether that example should be included in the examples
       |   50|                       that are run.
       |   51|    */
      0|   52|    public func include(filter: ExampleFilter) {
      0|   53|        inclusionFilters.append(filter)
      0|   54|    }
       |   55|
       |   56|    /**
       |   57|        Registers an exclusion filter.
       |   58|
       |   59|        All examples that remain after being filtered by the inclusion filters are
       |   60|        then filtered via all exclusion filters.
       |   61|
       |   62|        - parameter filter: A filter that, given an example, returns a value indicating
       |   63|                       whether that example should be excluded from the examples
       |   64|                       that are run.
       |   65|    */
      0|   66|    public func exclude(filter: ExampleFilter) {
      0|   67|        exclusionFilters.append(filter)
      0|   68|    }
       |   69|
       |   70|    /**
       |   71|        Identical to Quick.Configuration.beforeEach, except the closure is
       |   72|        provided with metadata on the example that the closure is being run
       |   73|        prior to.
       |   74|    */
       |   75|#if _runtime(_ObjC)
       |   76|    @objc(beforeEachWithMetadata:)
      0|   77|    public func beforeEach(closure: BeforeExampleWithMetadataClosure) {
      0|   78|        exampleHooks.appendBefore(closure)
      0|   79|    }
       |   80|#else
       |   81|    public func beforeEach(closure: BeforeExampleWithMetadataClosure) {
       |   82|        exampleHooks.appendBefore(closure)
       |   83|    }
       |   84|#endif
       |   85|
       |   86|    /**
       |   87|        Like Quick.DSL.beforeEach, this configures Quick to execute the
       |   88|        given closure before each example that is run. The closure
       |   89|        passed to this method is executed before each example Quick runs,
       |   90|        globally across the test suite. You may call this method multiple
       |   91|        times across mulitple +[QuickConfigure configure:] methods in order
       |   92|        to define several closures to run before each example.
       |   93|
       |   94|        Note that, since Quick makes no guarantee as to the order in which
       |   95|        +[QuickConfiguration configure:] methods are evaluated, there is no
       |   96|        guarantee as to the order in which beforeEach closures are evaluated
       |   97|        either. Mulitple beforeEach defined on a single configuration, however,
       |   98|        will be executed in the order they're defined.
       |   99|
       |  100|        - parameter closure: The closure to be executed before each example
       |  101|                        in the test suite.
       |  102|    */
      0|  103|    public func beforeEach(closure: BeforeExampleClosure) {
      0|  104|        exampleHooks.appendBefore(closure)
      0|  105|    }
       |  106|
       |  107|    /**
       |  108|        Identical to Quick.Configuration.afterEach, except the closure
       |  109|        is provided with metadata on the example that the closure is being
       |  110|        run after.
       |  111|    */
       |  112|#if _runtime(_ObjC)
       |  113|    @objc(afterEachWithMetadata:)
      0|  114|    public func afterEach(closure: AfterExampleWithMetadataClosure) {
      0|  115|        exampleHooks.appendAfter(closure)
      0|  116|    }
       |  117|#else
       |  118|    public func afterEach(closure: AfterExampleWithMetadataClosure) {
       |  119|        exampleHooks.appendAfter(closure)
       |  120|    }
       |  121|#endif
       |  122|
       |  123|    /**
       |  124|        Like Quick.DSL.afterEach, this configures Quick to execute the
       |  125|        given closure after each example that is run. The closure
       |  126|        passed to this method is executed after each example Quick runs,
       |  127|        globally across the test suite. You may call this method multiple
       |  128|        times across mulitple +[QuickConfigure configure:] methods in order
       |  129|        to define several closures to run after each example.
       |  130|
       |  131|        Note that, since Quick makes no guarantee as to the order in which
       |  132|        +[QuickConfiguration configure:] methods are evaluated, there is no
       |  133|        guarantee as to the order in which afterEach closures are evaluated
       |  134|        either. Mulitple afterEach defined on a single configuration, however,
       |  135|        will be executed in the order they're defined.
       |  136|
       |  137|        - parameter closure: The closure to be executed before each example
       |  138|                        in the test suite.
       |  139|    */
      0|  140|    public func afterEach(closure: AfterExampleClosure) {
      0|  141|        exampleHooks.appendAfter(closure)
      0|  142|    }
       |  143|
       |  144|    /**
       |  145|        Like Quick.DSL.beforeSuite, this configures Quick to execute
       |  146|        the given closure prior to any and all examples that are run.
       |  147|        The two methods are functionally equivalent.
       |  148|    */
      0|  149|    public func beforeSuite(closure: BeforeSuiteClosure) {
      0|  150|        suiteHooks.appendBefore(closure)
      0|  151|    }
       |  152|
       |  153|    /**
       |  154|        Like Quick.DSL.afterSuite, this configures Quick to execute
       |  155|        the given closure after all examples have been run.
       |  156|        The two methods are functionally equivalent.
       |  157|    */
      0|  158|    public func afterSuite(closure: AfterSuiteClosure) {
      0|  159|        suiteHooks.appendAfter(closure)
      0|  160|    }
       |  161|}

/Users/wangjie/Developer/iOS/MyPods/KissPaginate/Example/Pods/Quick/Sources/Quick/Configuration/QuickConfiguration.m:
       |    1|#import "QuickConfiguration.h"
       |    2|#import "World.h"
       |    3|#import <objc/runtime.h>
       |    4|
       |    5|typedef void (^QCKClassEnumerationBlock)(Class klass);
       |    6|
       |    7|/**
       |    8| Finds all direct subclasses of the given class and passes them to the block provided.
       |    9| The classes are iterated over in the order that objc_getClassList returns them.
       |   10|
       |   11| @param klass The base class to find subclasses of.
       |   12| @param block A block that takes a Class. This block will be executed once for each subclass of klass.
       |   13| */
      1|   14|void qck_enumerateSubclasses(Class klass, QCKClassEnumerationBlock block) {
      1|   15|    Class *classes = NULL;
      1|   16|    int classesCount = objc_getClassList(NULL, 0);
      1|   17|
      1|   18|    if (classesCount > 0) {
      1|   19|        classes = (Class *)calloc(sizeof(Class), classesCount);
      1|   20|        classesCount = objc_getClassList(classes, classesCount);
      1|   21|
      1|   22|        Class subclass, superclass;
  5.67k|   23|        for(int i = 0; i < classesCount; i++) {
  5.67k|   24|            subclass = classes[i];
  5.67k|   25|            superclass = class_getSuperclass(subclass);
  5.67k|   26|            if (superclass == klass && block) {
      0|   27|                block(subclass);
      0|   28|            }
  5.67k|   29|        }
      1|   30|
      1|   31|        free(classes);
      1|   32|    }
      1|   33|}
       |   34|
       |   35|@implementation QuickConfiguration
       |   36|
       |   37|#pragma mark - Object Lifecycle
       |   38|
       |   39|/**
       |   40| QuickConfiguration is not meant to be instantiated; it merely provides a hook
       |   41| for users to configure how Quick behaves. Raise an exception if an instance of
       |   42| QuickConfiguration is created.
       |   43| */
      0|   44|- (instancetype)init {
      0|   45|    NSString *className = NSStringFromClass([self class]);
      0|   46|    NSString *selectorName = NSStringFromSelector(@selector(configure:));
      0|   47|    [NSException raise:NSInternalInconsistencyException
      0|   48|                format:@"%@ is not meant to be instantiated; "
      0|   49|     @"subclass %@ and override %@ to configure Quick.",
      0|   50|     className, className, selectorName];
      0|   51|    return nil;
      0|   52|}
       |   53|
       |   54|#pragma mark - NSObject Overrides
       |   55|
       |   56|/**
       |   57| Hook into when QuickConfiguration is initialized in the runtime in order to
       |   58| call +[QuickConfiguration configure:] on each of its subclasses.
       |   59| */
      3|   60|+ (void)initialize {
      3|   61|    // Only enumerate over the subclasses of QuickConfiguration, not any of its subclasses.
      3|   62|    if ([self class] == [QuickConfiguration class]) {
      3|   63|
      3|   64|        // Only enumerate over subclasses once, even if +[QuickConfiguration initialize]
      3|   65|        // were to be called several times. This is necessary because +[QuickSpec initialize]
      3|   66|        // manually calls +[QuickConfiguration initialize].
      3|   67|        static dispatch_once_t onceToken;
      3|   68|        dispatch_once(&onceToken, ^{
      0|   69|            qck_enumerateSubclasses([QuickConfiguration class], ^(__unsafe_unretained Class klass) {
      0|   70|                [[World sharedWorld] configure:^(Configuration *configuration) {
      0|   71|                    [klass configure:configuration];
      0|   72|                }];
      0|   73|            });
      1|   74|            [[World sharedWorld] finalizeConfiguration];
      1|   75|        });
      3|   76|    }
      3|   77|}
       |   78|
       |   79|#pragma mark - Public Interface
       |   80|
      0|   81|+ (void)configure:(Configuration *)configuration { }
       |   82|
       |   83|@end

/Users/wangjie/Developer/iOS/MyPods/KissPaginate/Example/Pods/Quick/Sources/Quick/DSL/DSL.swift:
       |    1|/**
       |    2|    Defines a closure to be run prior to any examples in the test suite.
       |    3|    You may define an unlimited number of these closures, but there is no
       |    4|    guarantee as to the order in which they're run.
       |    5|
       |    6|    If the test suite crashes before the first example is run, this closure
       |    7|    will not be executed.
       |    8|
       |    9|    - parameter closure: The closure to be run prior to any examples in the test suite.
       |   10|*/
      0|   11|public func beforeSuite(closure: BeforeSuiteClosure) {
      0|   12|    World.sharedWorld.beforeSuite(closure)
      0|   13|}
       |   14|
       |   15|/**
       |   16|    Defines a closure to be run after all of the examples in the test suite.
       |   17|    You may define an unlimited number of these closures, but there is no
       |   18|    guarantee as to the order in which they're run.
       |   19|
       |   20|    If the test suite crashes before all examples are run, this closure
       |   21|    will not be executed.
       |   22|
       |   23|    - parameter closure: The closure to be run after all of the examples in the test suite.
       |   24|*/
      0|   25|public func afterSuite(closure: AfterSuiteClosure) {
      0|   26|    World.sharedWorld.afterSuite(closure)
      0|   27|}
       |   28|
       |   29|/**
       |   30|    Defines a group of shared examples. These examples can be re-used in several locations
       |   31|    by using the `itBehavesLike` function.
       |   32|
       |   33|    - parameter name: The name of the shared example group. This must be unique across all shared example
       |   34|                 groups defined in a test suite.
       |   35|    - parameter closure: A closure containing the examples. This behaves just like an example group defined
       |   36|                    using `describe` or `context`--the closure may contain any number of `beforeEach`
       |   37|                    and `afterEach` closures, as well as any number of examples (defined using `it`).
       |   38|*/
      0|   39|public func sharedExamples(name: String, closure: () -> ()) {
      0|   40|    World.sharedWorld.sharedExamples(name, closure: { (NSDictionary) in closure() })
      0|   41|}
       |   42|
       |   43|/**
       |   44|    Defines a group of shared examples. These examples can be re-used in several locations
       |   45|    by using the `itBehavesLike` function.
       |   46|
       |   47|    - parameter name: The name of the shared example group. This must be unique across all shared example
       |   48|                 groups defined in a test suite.
       |   49|    - parameter closure: A closure containing the examples. This behaves just like an example group defined
       |   50|                    using `describe` or `context`--the closure may contain any number of `beforeEach`
       |   51|                    and `afterEach` closures, as well as any number of examples (defined using `it`).
       |   52|
       |   53|                    The closure takes a SharedExampleContext as an argument. This context is a function
       |   54|                    that can be executed to retrieve parameters passed in via an `itBehavesLike` function.
       |   55|*/
      0|   56|public func sharedExamples(name: String, closure: SharedExampleClosure) {
      0|   57|    World.sharedWorld.sharedExamples(name, closure: closure)
      0|   58|}
       |   59|
       |   60|/**
       |   61|    Defines an example group. Example groups are logical groupings of examples.
       |   62|    Example groups can share setup and teardown code.
       |   63|
       |   64|    - parameter description: An arbitrary string describing the example group.
       |   65|    - parameter closure: A closure that can contain other examples.
       |   66|    - parameter flags: A mapping of string keys to booleans that can be used to filter examples or example groups.
       |   67|*/
      1|   68|public func describe(description: String, flags: FilterFlags = [:], closure: () -> ()) {
      1|   69|    World.sharedWorld.describe(description, flags: flags, closure: closure)
      1|   70|}
       |   71|
       |   72|/**
       |   73|    Defines an example group. Equivalent to `describe`.
       |   74|*/
      6|   75|public func context(description: String, flags: FilterFlags = [:], closure: () -> ()) {
      6|   76|    World.sharedWorld.context(description, flags: flags, closure: closure)
      6|   77|}
       |   78|
       |   79|/**
       |   80|    Defines a closure to be run prior to each example in the current example
       |   81|    group. This closure is not run for pending or otherwise disabled examples.
       |   82|    An example group may contain an unlimited number of beforeEach. They'll be
       |   83|    run in the order they're defined, but you shouldn't rely on that behavior.
       |   84|
       |   85|    - parameter closure: The closure to be run prior to each example.
       |   86|*/
      7|   87|public func beforeEach(closure: BeforeExampleClosure) {
      7|   88|    World.sharedWorld.beforeEach(closure)
      7|   89|}
       |   90|
       |   91|/**
       |   92|    Identical to Quick.DSL.beforeEach, except the closure is provided with
       |   93|    metadata on the example that the closure is being run prior to.
       |   94|*/
      0|   95|public func beforeEach(closure: BeforeExampleWithMetadataClosure) {
      0|   96|    World.sharedWorld.beforeEach(closure: closure)
      0|   97|}
       |   98|
       |   99|/**
       |  100|    Defines a closure to be run after each example in the current example
       |  101|    group. This closure is not run for pending or otherwise disabled examples.
       |  102|    An example group may contain an unlimited number of afterEach. They'll be
       |  103|    run in the order they're defined, but you shouldn't rely on that behavior.
       |  104|
       |  105|    - parameter closure: The closure to be run after each example.
       |  106|*/
      0|  107|public func afterEach(closure: AfterExampleClosure) {
      0|  108|    World.sharedWorld.afterEach(closure)
      0|  109|}
       |  110|
       |  111|/**
       |  112|    Identical to Quick.DSL.afterEach, except the closure is provided with
       |  113|    metadata on the example that the closure is being run after.
       |  114|*/
      0|  115|public func afterEach(closure: AfterExampleWithMetadataClosure) {
      0|  116|    World.sharedWorld.afterEach(closure: closure)
      0|  117|}
       |  118|
       |  119|/**
       |  120|    Defines an example. Examples use assertions to demonstrate how code should
       |  121|    behave. These are like "tests" in XCTest.
       |  122|
       |  123|    - parameter description: An arbitrary string describing what the example is meant to specify.
       |  124|    - parameter closure: A closure that can contain assertions.
       |  125|    - parameter flags: A mapping of string keys to booleans that can be used to filter examples or example groups.
       |  126|                  Empty by default.
       |  127|    - parameter file: The absolute path to the file containing the example. A sensible default is provided.
       |  128|    - parameter line: The line containing the example. A sensible default is provided.
       |  129|*/
     14|  130|public func it(description: String, flags: FilterFlags = [:], file: String = #file, line: UInt = #line, closure: () -> ()) {
     14|  131|    World.sharedWorld.it(description, flags: flags, file: file, line: line, closure: closure)
     14|  132|}
       |  133|
       |  134|/**
       |  135|    Inserts the examples defined using a `sharedExamples` function into the current example group.
       |  136|    The shared examples are executed at this location, as if they were written out manually.
       |  137|
       |  138|    - parameter name: The name of the shared examples group to be executed. This must be identical to the
       |  139|                 name of a shared examples group defined using `sharedExamples`. If there are no shared
       |  140|                 examples that match the name given, an exception is thrown and the test suite will crash.
       |  141|    - parameter flags: A mapping of string keys to booleans that can be used to filter examples or example groups.
       |  142|                  Empty by default.
       |  143|    - parameter file: The absolute path to the file containing the current example group. A sensible default is provided.
       |  144|    - parameter line: The line containing the current example group. A sensible default is provided.
       |  145|*/
      0|  146|public func itBehavesLike(name: String, flags: FilterFlags = [:], file: String = #file, line: UInt = #line) {
      0|  147|    itBehavesLike(name, flags: flags, file: file, line: line, sharedExampleContext: { return [:] })
      0|  148|}
       |  149|
       |  150|/**
       |  151|    Inserts the examples defined using a `sharedExamples` function into the current example group.
       |  152|    The shared examples are executed at this location, as if they were written out manually.
       |  153|    This function also passes those shared examples a context that can be evaluated to give the shared
       |  154|    examples extra information on the subject of the example.
       |  155|
       |  156|    - parameter name: The name of the shared examples group to be executed. This must be identical to the
       |  157|                 name of a shared examples group defined using `sharedExamples`. If there are no shared
       |  158|                 examples that match the name given, an exception is thrown and the test suite will crash.
       |  159|    - parameter sharedExampleContext: A closure that, when evaluated, returns key-value pairs that provide the
       |  160|                                 shared examples with extra information on the subject of the example.
       |  161|    - parameter flags: A mapping of string keys to booleans that can be used to filter examples or example groups.
       |  162|                  Empty by default.
       |  163|    - parameter file: The absolute path to the file containing the current example group. A sensible default is provided.
       |  164|    - parameter line: The line containing the current example group. A sensible default is provided.
       |  165|*/
      0|  166|public func itBehavesLike(name: String, flags: FilterFlags = [:], file: String = #file, line: UInt = #line, sharedExampleContext: SharedExampleContext) {
      0|  167|    World.sharedWorld.itBehavesLike(name, sharedExampleContext: sharedExampleContext, flags: flags, file: file, line: line)
      0|  168|}
       |  169|
       |  170|/**
       |  171|    Defines an example or example group that should not be executed. Use `pending` to temporarily disable
       |  172|    examples or groups that should not be run yet.
       |  173|
       |  174|    - parameter description: An arbitrary string describing the example or example group.
       |  175|    - parameter closure: A closure that will not be evaluated.
       |  176|*/
      0|  177|public func pending(description: String, closure: () -> ()) {
      0|  178|    World.sharedWorld.pending(description, closure: closure)
      0|  179|}
       |  180|
       |  181|/**
       |  182|    Use this to quickly mark a `describe` closure as pending.
       |  183|    This disables all examples within the closure.
       |  184|*/
      0|  185|public func xdescribe(description: String, flags: FilterFlags, closure: () -> ()) {
      0|  186|    World.sharedWorld.xdescribe(description, flags: flags, closure: closure)
      0|  187|}
       |  188|
       |  189|/**
       |  190|    Use this to quickly mark a `context` closure as pending.
       |  191|    This disables all examples within the closure.
       |  192|*/
      0|  193|public func xcontext(description: String, flags: FilterFlags, closure: () -> ()) {
      0|  194|    xdescribe(description, flags: flags, closure: closure)
      0|  195|}
       |  196|
       |  197|/**
       |  198|    Use this to quickly mark an `it` closure as pending.
       |  199|    This disables the example and ensures the code within the closure is never run.
       |  200|*/
      0|  201|public func xit(description: String, flags: FilterFlags = [:], file: String = #file, line: UInt = #line, closure: () -> ()) {
      0|  202|    World.sharedWorld.xit(description, flags: flags, file: file, line: line, closure: closure)
      0|  203|}
       |  204|
       |  205|/**
       |  206|    Use this to quickly focus a `describe` closure, focusing the examples in the closure.
       |  207|    If any examples in the test suite are focused, only those examples are executed.
       |  208|    This trumps any explicitly focused or unfocused examples within the closure--they are all treated as focused.
       |  209|*/
      0|  210|public func fdescribe(description: String, flags: FilterFlags = [:], closure: () -> ()) {
      0|  211|    World.sharedWorld.fdescribe(description, flags: flags, closure: closure)
      0|  212|}
       |  213|
       |  214|/**
       |  215|    Use this to quickly focus a `context` closure. Equivalent to `fdescribe`.
       |  216|*/
      0|  217|public func fcontext(description: String, flags: FilterFlags = [:], closure: () -> ()) {
      0|  218|    fdescribe(description, flags: flags, closure: closure)
      0|  219|}
       |  220|
       |  221|/**
       |  222|    Use this to quickly focus an `it` closure, focusing the example.
       |  223|    If any examples in the test suite are focused, only those examples are executed.
       |  224|*/
      0|  225|public func fit(description: String, flags: FilterFlags = [:], file: String = #file, line: UInt = #line, closure: () -> ()) {
      0|  226|    World.sharedWorld.fit(description, flags: flags, file: file, line: line, closure: closure)
      0|  227|}

/Users/wangjie/Developer/iOS/MyPods/KissPaginate/Example/Pods/Quick/Sources/Quick/DSL/QCKDSL.h:
       |    1|#import <Foundation/Foundation.h>
       |    2|
       |    3|@class ExampleMetadata;
       |    4|
       |    5|/**
       |    6| Provides a hook for Quick to be configured before any examples are run.
       |    7| Within this scope, override the +[QuickConfiguration configure:] method
       |    8| to set properties on a configuration object to customize Quick behavior.
       |    9| For details, see the documentation for Configuraiton.swift.
       |   10|
       |   11| @param name The name of the configuration class. Like any Objective-C
       |   12|             class name, this must be unique to the current runtime
       |   13|             environment.
       |   14| */
       |   15|#define QuickConfigurationBegin(name) \
       |   16|    @interface name : QuickConfiguration; @end \
       |   17|    @implementation name \
       |   18|
       |   19|
       |   20|/**
       |   21| Marks the end of a Quick configuration.
       |   22| Make sure you put this after `QuickConfigurationBegin`.
       |   23| */
       |   24|#define QuickConfigurationEnd \
       |   25|    @end \
       |   26|
       |   27|
       |   28|/**
       |   29| Defines a new QuickSpec. Define examples and example groups within the space
       |   30| between this and `QuickSpecEnd`.
       |   31|
       |   32| @param name The name of the spec class. Like any Objective-C class name, this
       |   33|             must be unique to the current runtime environment.
       |   34| */
       |   35|#define QuickSpecBegin(name) \
       |   36|    @interface name : QuickSpec; @end \
       |   37|    @implementation name \
       |   38|    - (void)spec { \
       |   39|
       |   40|
       |   41|/**
       |   42| Marks the end of a QuickSpec. Make sure you put this after `QuickSpecBegin`.
       |   43| */
       |   44|#define QuickSpecEnd \
       |   45|    } \
       |   46|    @end \
       |   47|
       |   48|typedef NSDictionary *(^QCKDSLSharedExampleContext)(void);
       |   49|typedef void (^QCKDSLSharedExampleBlock)(QCKDSLSharedExampleContext);
       |   50|typedef void (^QCKDSLEmptyBlock)(void);
       |   51|typedef void (^QCKDSLExampleMetadataBlock)(ExampleMetadata *exampleMetadata);
       |   52|
       |   53|#define QUICK_EXPORT FOUNDATION_EXPORT
       |   54|
       |   55|QUICK_EXPORT void qck_beforeSuite(QCKDSLEmptyBlock closure);
       |   56|QUICK_EXPORT void qck_afterSuite(QCKDSLEmptyBlock closure);
       |   57|QUICK_EXPORT void qck_sharedExamples(NSString *name, QCKDSLSharedExampleBlock closure);
       |   58|QUICK_EXPORT void qck_describe(NSString *description, QCKDSLEmptyBlock closure);
       |   59|QUICK_EXPORT void qck_context(NSString *description, QCKDSLEmptyBlock closure);
       |   60|QUICK_EXPORT void qck_beforeEach(QCKDSLEmptyBlock closure);
       |   61|QUICK_EXPORT void qck_beforeEachWithMetadata(QCKDSLExampleMetadataBlock closure);
       |   62|QUICK_EXPORT void qck_afterEach(QCKDSLEmptyBlock closure);
       |   63|QUICK_EXPORT void qck_afterEachWithMetadata(QCKDSLExampleMetadataBlock closure);
       |   64|QUICK_EXPORT void qck_pending(NSString *description, QCKDSLEmptyBlock closure);
       |   65|QUICK_EXPORT void qck_xdescribe(NSString *description, QCKDSLEmptyBlock closure);
       |   66|QUICK_EXPORT void qck_xcontext(NSString *description, QCKDSLEmptyBlock closure);
       |   67|QUICK_EXPORT void qck_fdescribe(NSString *description, QCKDSLEmptyBlock closure);
       |   68|QUICK_EXPORT void qck_fcontext(NSString *description, QCKDSLEmptyBlock closure);
       |   69|
       |   70|#ifndef QUICK_DISABLE_SHORT_SYNTAX
       |   71|/**
       |   72|    Defines a closure to be run prior to any examples in the test suite.
       |   73|    You may define an unlimited number of these closures, but there is no
       |   74|    guarantee as to the order in which they're run.
       |   75| 
       |   76|    If the test suite crashes before the first example is run, this closure
       |   77|    will not be executed.
       |   78| 
       |   79|    @param closure The closure to be run prior to any examples in the test suite.
       |   80| */
      0|   81|static inline void beforeSuite(QCKDSLEmptyBlock closure) {
      0|   82|    qck_beforeSuite(closure);
      0|   83|}
       |   84|
       |   85|
       |   86|/**
       |   87|    Defines a closure to be run after all of the examples in the test suite.
       |   88|    You may define an unlimited number of these closures, but there is no
       |   89|    guarantee as to the order in which they're run.
       |   90|     
       |   91|    If the test suite crashes before all examples are run, this closure
       |   92|    will not be executed.
       |   93| 
       |   94|    @param closure The closure to be run after all of the examples in the test suite.
       |   95| */
      0|   96|static inline void afterSuite(QCKDSLEmptyBlock closure) {
      0|   97|    qck_afterSuite(closure);
      0|   98|}
       |   99|
       |  100|/**
       |  101|    Defines a group of shared examples. These examples can be re-used in several locations
       |  102|    by using the `itBehavesLike` function.
       |  103| 
       |  104|    @param name The name of the shared example group. This must be unique across all shared example
       |  105|                groups defined in a test suite.
       |  106|    @param closure A closure containing the examples. This behaves just like an example group defined
       |  107|                   using `describe` or `context`--the closure may contain any number of `beforeEach`
       |  108|                   and `afterEach` closures, as well as any number of examples (defined using `it`).
       |  109| */
      0|  110|static inline void sharedExamples(NSString *name, QCKDSLSharedExampleBlock closure) {
      0|  111|    qck_sharedExamples(name, closure);
      0|  112|}
       |  113|
       |  114|/**
       |  115|    Defines an example group. Example groups are logical groupings of examples.
       |  116|    Example groups can share setup and teardown code.
       |  117| 
       |  118|    @param description An arbitrary string describing the example group.
       |  119|    @param closure A closure that can contain other examples.
       |  120| */
      0|  121|static inline void describe(NSString *description, QCKDSLEmptyBlock closure) {
      0|  122|    qck_describe(description, closure);
      0|  123|}
       |  124|
       |  125|/**
       |  126|    Defines an example group. Equivalent to `describe`.
       |  127| */
      0|  128|static inline void context(NSString *description, QCKDSLEmptyBlock closure) {
      0|  129|    qck_context(description, closure);
      0|  130|}
       |  131|
       |  132|/**
       |  133|    Defines a closure to be run prior to each example in the current example
       |  134|    group. This closure is not run for pending or otherwise disabled examples.
       |  135|    An example group may contain an unlimited number of beforeEach. They'll be
       |  136|    run in the order they're defined, but you shouldn't rely on that behavior.
       |  137| 
       |  138|    @param closure The closure to be run prior to each example.
       |  139| */
      0|  140|static inline void beforeEach(QCKDSLEmptyBlock closure) {
      0|  141|    qck_beforeEach(closure);
      0|  142|}
       |  143|
       |  144|/**
       |  145|    Identical to QCKDSL.beforeEach, except the closure is provided with
       |  146|    metadata on the example that the closure is being run prior to.
       |  147| */
      0|  148|static inline void beforeEachWithMetadata(QCKDSLExampleMetadataBlock closure) {
      0|  149|    qck_beforeEachWithMetadata(closure);
      0|  150|}
       |  151|
       |  152|/**
       |  153|    Defines a closure to be run after each example in the current example
       |  154|    group. This closure is not run for pending or otherwise disabled examples.
       |  155|    An example group may contain an unlimited number of afterEach. They'll be
       |  156|    run in the order they're defined, but you shouldn't rely on that behavior.
       |  157| 
       |  158|    @param closure The closure to be run after each example.
       |  159| */
      0|  160|static inline void afterEach(QCKDSLEmptyBlock closure) {
      0|  161|    qck_afterEach(closure);
      0|  162|}
       |  163|
       |  164|/**
       |  165|    Identical to QCKDSL.afterEach, except the closure is provided with
       |  166|    metadata on the example that the closure is being run after.
       |  167| */
      0|  168|static inline void afterEachWithMetadata(QCKDSLExampleMetadataBlock closure) {
      0|  169|    qck_afterEachWithMetadata(closure);
      0|  170|}
       |  171|
       |  172|/**
       |  173|    Defines an example or example group that should not be executed. Use `pending` to temporarily disable
       |  174|    examples or groups that should not be run yet.
       |  175| 
       |  176|    @param description An arbitrary string describing the example or example group.
       |  177|    @param closure A closure that will not be evaluated.
       |  178| */
      0|  179|static inline void pending(NSString *description, QCKDSLEmptyBlock closure) {
      0|  180|    qck_pending(description, closure);
      0|  181|}
       |  182|
       |  183|/**
       |  184|    Use this to quickly mark a `describe` block as pending.
       |  185|    This disables all examples within the block.
       |  186| */
      0|  187|static inline void xdescribe(NSString *description, QCKDSLEmptyBlock closure) {
      0|  188|    qck_xdescribe(description, closure);
      0|  189|}
       |  190|
       |  191|/**
       |  192|    Use this to quickly mark a `context` block as pending.
       |  193|    This disables all examples within the block.
       |  194| */
      0|  195|static inline void xcontext(NSString *description, QCKDSLEmptyBlock closure) {
      0|  196|    qck_xcontext(description, closure);
      0|  197|}
       |  198|
       |  199|/**
       |  200|    Use this to quickly focus a `describe` block, focusing the examples in the block.
       |  201|    If any examples in the test suite are focused, only those examples are executed.
       |  202|    This trumps any explicitly focused or unfocused examples within the block--they are all treated as focused.
       |  203| */
      0|  204|static inline void fdescribe(NSString *description, QCKDSLEmptyBlock closure) {
      0|  205|    qck_fdescribe(description, closure);
      0|  206|}
       |  207|
       |  208|/**
       |  209|    Use this to quickly focus a `context` block. Equivalent to `fdescribe`.
       |  210| */
      0|  211|static inline void fcontext(NSString *description, QCKDSLEmptyBlock closure) {
      0|  212|    qck_fcontext(description, closure);
      0|  213|}
       |  214|
       |  215|#define it qck_it
       |  216|#define xit qck_xit
       |  217|#define fit qck_fit
       |  218|#define itBehavesLike qck_itBehavesLike
       |  219|#define xitBehavesLike qck_xitBehavesLike
       |  220|#define fitBehavesLike qck_fitBehavesLike
       |  221|#endif
       |  222|
       |  223|#define qck_it qck_it_builder(@{}, @(__FILE__), __LINE__)
       |  224|#define qck_xit qck_it_builder(@{Filter.pending: @YES}, @(__FILE__), __LINE__)
       |  225|#define qck_fit qck_it_builder(@{Filter.focused: @YES}, @(__FILE__), __LINE__)
       |  226|#define qck_itBehavesLike qck_itBehavesLike_builder(@{}, @(__FILE__), __LINE__)
       |  227|#define qck_xitBehavesLike qck_itBehavesLike_builder(@{Filter.pending: @YES}, @(__FILE__), __LINE__)
       |  228|#define qck_fitBehavesLike qck_itBehavesLike_builder(@{Filter.focused: @YES}, @(__FILE__), __LINE__)
       |  229|
       |  230|typedef void (^QCKItBlock)(NSString *description, QCKDSLEmptyBlock closure);
       |  231|typedef void (^QCKItBehavesLikeBlock)(NSString *description, QCKDSLSharedExampleContext context);
       |  232|
       |  233|QUICK_EXPORT QCKItBlock qck_it_builder(NSDictionary *flags, NSString *file, NSUInteger line);
       |  234|QUICK_EXPORT QCKItBehavesLikeBlock qck_itBehavesLike_builder(NSDictionary *flags, NSString *file, NSUInteger line);

/Users/wangjie/Developer/iOS/MyPods/KissPaginate/Example/Pods/Quick/Sources/Quick/DSL/QCKDSL.m:
       |    1|#import "QCKDSL.h"
       |    2|#import "World.h"
       |    3|#import "World+DSL.h"
       |    4|
      0|    5|void qck_beforeSuite(QCKDSLEmptyBlock closure) {
      0|    6|    [[World sharedWorld] beforeSuite:closure];
      0|    7|}
       |    8|
      0|    9|void qck_afterSuite(QCKDSLEmptyBlock closure) {
      0|   10|    [[World sharedWorld] afterSuite:closure];
      0|   11|}
       |   12|
      0|   13|void qck_sharedExamples(NSString *name, QCKDSLSharedExampleBlock closure) {
      0|   14|    [[World sharedWorld] sharedExamples:name closure:closure];
      0|   15|}
       |   16|
      0|   17|void qck_describe(NSString *description, QCKDSLEmptyBlock closure) {
      0|   18|    [[World sharedWorld] describe:description flags:@{} closure:closure];
      0|   19|}
       |   20|
      0|   21|void qck_context(NSString *description, QCKDSLEmptyBlock closure) {
      0|   22|    qck_describe(description, closure);
      0|   23|}
       |   24|
      0|   25|void qck_beforeEach(QCKDSLEmptyBlock closure) {
      0|   26|    [[World sharedWorld] beforeEach:closure];
      0|   27|}
       |   28|
      0|   29|void qck_beforeEachWithMetadata(QCKDSLExampleMetadataBlock closure) {
      0|   30|    [[World sharedWorld] beforeEachWithMetadata:closure];
      0|   31|}
       |   32|
      0|   33|void qck_afterEach(QCKDSLEmptyBlock closure) {
      0|   34|    [[World sharedWorld] afterEach:closure];
      0|   35|}
       |   36|
      0|   37|void qck_afterEachWithMetadata(QCKDSLExampleMetadataBlock closure) {
      0|   38|    [[World sharedWorld] afterEachWithMetadata:closure];
      0|   39|}
       |   40|
      0|   41|QCKItBlock qck_it_builder(NSDictionary *flags, NSString *file, NSUInteger line) {
      0|   42|    return ^(NSString *description, QCKDSLEmptyBlock closure) {
      0|   43|        [[World sharedWorld] itWithDescription:description
      0|   44|                                         flags:flags
      0|   45|                                          file:file
      0|   46|                                          line:line
      0|   47|                                       closure:closure];
      0|   48|    };
      0|   49|}
       |   50|
      0|   51|QCKItBehavesLikeBlock qck_itBehavesLike_builder(NSDictionary *flags, NSString *file, NSUInteger line) {
      0|   52|    return ^(NSString *name, QCKDSLSharedExampleContext context) {
      0|   53|        [[World sharedWorld] itBehavesLikeSharedExampleNamed:name
      0|   54|                                        sharedExampleContext:context
      0|   55|                                                       flags:flags
      0|   56|                                                        file:file
      0|   57|                                                        line:line];
      0|   58|    };
      0|   59|}
       |   60|
      0|   61|void qck_pending(NSString *description, QCKDSLEmptyBlock closure) {
      0|   62|    [[World sharedWorld] pending:description closure:closure];
      0|   63|}
       |   64|
      0|   65|void qck_xdescribe(NSString *description, QCKDSLEmptyBlock closure) {
      0|   66|    [[World sharedWorld] xdescribe:description flags:@{} closure:closure];
      0|   67|}
       |   68|
      0|   69|void qck_xcontext(NSString *description, QCKDSLEmptyBlock closure) {
      0|   70|    qck_xdescribe(description, closure);
      0|   71|}
       |   72|
      0|   73|void qck_fdescribe(NSString *description, QCKDSLEmptyBlock closure) {
      0|   74|    [[World sharedWorld] fdescribe:description flags:@{} closure:closure];
      0|   75|}
       |   76|
      0|   77|void qck_fcontext(NSString *description, QCKDSLEmptyBlock closure) {
      0|   78|    qck_fdescribe(description, closure);
      0|   79|}

/Users/wangjie/Developer/iOS/MyPods/KissPaginate/Example/Pods/Quick/Sources/Quick/DSL/World+DSL.swift:
       |    1|import Foundation
       |    2|
       |    3|/**
       |    4|    Adds methods to World to support top-level DSL functions (Swift) and
       |    5|    macros (Objective-C). These functions map directly to the DSL that test
       |    6|    writers use in their specs.
       |    7|*/
       |    8|extension World {
      0|    9|    internal func beforeSuite(closure: BeforeSuiteClosure) {
      0|   10|        suiteHooks.appendBefore(closure)
      0|   11|    }
       |   12|
      0|   13|    internal func afterSuite(closure: AfterSuiteClosure) {
      0|   14|        suiteHooks.appendAfter(closure)
      0|   15|    }
       |   16|
      0|   17|    internal func sharedExamples(name: String, closure: SharedExampleClosure) {
      0|   18|        registerSharedExample(name, closure: closure)
      0|   19|    }
       |   20|
      7|   21|    internal func describe(description: String, flags: FilterFlags, closure: () -> ()) {
      0|   22|        guard currentExampleMetadata == nil else {
      0|   23|            raiseError("'describe' cannot be used inside '\(currentPhase)', 'describe' may only be used inside 'context' or 'describe'. ")
      7|   24|        }
      0|   25|        guard currentExampleGroup != nil else {
      0|   26|            raiseError("Error: example group was not created by its parent QuickSpec spec. Check that describe() or context() was used in QuickSpec.spec() and not a more general context (i.e. an XCTestCase test)")
      7|   27|        }
      7|   28|        let group = ExampleGroup(description: description, flags: flags)
      7|   29|        currentExampleGroup.appendExampleGroup(group)
      7|   30|        performWithCurrentExampleGroup(group, closure: closure)
      7|   31|    }
       |   32|
      6|   33|    internal func context(description: String, flags: FilterFlags, closure: () -> ()) {
      0|   34|        guard currentExampleMetadata == nil else {
      0|   35|            raiseError("'context' cannot be used inside '\(currentPhase)', 'context' may only be used inside 'context' or 'describe'. ")
      6|   36|        }
      6|   37|        self.describe(description, flags: flags, closure: closure)
      6|   38|    }
       |   39|
      0|   40|    internal func fdescribe(description: String, flags: FilterFlags, closure: () -> ()) {
      0|   41|        var focusedFlags = flags
      0|   42|        focusedFlags[Filter.focused] = true
      0|   43|        self.describe(description, flags: focusedFlags, closure: closure)
      0|   44|    }
       |   45|
      0|   46|    internal func xdescribe(description: String, flags: FilterFlags, closure: () -> ()) {
      0|   47|        var pendingFlags = flags
      0|   48|        pendingFlags[Filter.pending] = true
      0|   49|        self.describe(description, flags: pendingFlags, closure: closure)
      0|   50|    }
       |   51|
      7|   52|    internal func beforeEach(closure: BeforeExampleClosure) {
      0|   53|        guard currentExampleMetadata == nil else {
      0|   54|            raiseError("'beforeEach' cannot be used inside '\(currentPhase)', 'beforeEach' may only be used inside 'context' or 'describe'. ")
      7|   55|        }
      7|   56|        currentExampleGroup.hooks.appendBefore(closure)
      7|   57|    }
       |   58|
       |   59|#if _runtime(_ObjC)
       |   60|    @objc(beforeEachWithMetadata:)
      0|   61|    internal func beforeEach(closure closure: BeforeExampleWithMetadataClosure) {
      0|   62|        currentExampleGroup.hooks.appendBefore(closure)
      0|   63|    }
       |   64|#else
       |   65|    internal func beforeEach(closure closure: BeforeExampleWithMetadataClosure) {
       |   66|        currentExampleGroup.hooks.appendBefore(closure)
       |   67|    }
       |   68|#endif
       |   69|
      0|   70|    internal func afterEach(closure: AfterExampleClosure) {
      0|   71|        guard currentExampleMetadata == nil else {
      0|   72|            raiseError("'afterEach' cannot be used inside '\(currentPhase)', 'afterEach' may only be used inside 'context' or 'describe'. ")
      0|   73|        }
      0|   74|        currentExampleGroup.hooks.appendAfter(closure)
      0|   75|    }
       |   76|
       |   77|#if _runtime(_ObjC)
       |   78|    @objc(afterEachWithMetadata:)
      0|   79|    internal func afterEach(closure closure: AfterExampleWithMetadataClosure) {
      0|   80|        currentExampleGroup.hooks.appendAfter(closure)
      0|   81|    }
       |   82|#else
       |   83|    internal func afterEach(closure closure: AfterExampleWithMetadataClosure) {
       |   84|        currentExampleGroup.hooks.appendAfter(closure)
       |   85|    }
       |   86|#endif
       |   87|
     14|   88|    internal func it(description: String, flags: FilterFlags, file: String, line: UInt, closure: () -> ()) {
      0|   89|        if beforesCurrentlyExecuting {
      0|   90|            raiseError("'it' cannot be used inside 'beforeEach', 'it' may only be used inside 'context' or 'describe'. ")
     14|   91|        }
      0|   92|        if aftersCurrentlyExecuting {
      0|   93|            raiseError("'it' cannot be used inside 'afterEach', 'it' may only be used inside 'context' or 'describe'. ")
     14|   94|        }
      0|   95|        guard currentExampleMetadata == nil else {
      0|   96|            raiseError("'it' cannot be used inside 'it', 'it' may only be used inside 'context' or 'describe'. ")
     14|   97|        }
     14|   98|        let callsite = Callsite(file: file, line: line)
     14|   99|        let example = Example(description: description, callsite: callsite, flags: flags, closure: closure)
     14|  100|        currentExampleGroup.appendExample(example)
     14|  101|    }
       |  102|
      0|  103|    internal func fit(description: String, flags: FilterFlags, file: String, line: UInt, closure: () -> ()) {
      0|  104|        var focusedFlags = flags
      0|  105|        focusedFlags[Filter.focused] = true
      0|  106|        self.it(description, flags: focusedFlags, file: file, line: line, closure: closure)
      0|  107|    }
       |  108|
      0|  109|    internal func xit(description: String, flags: FilterFlags, file: String, line: UInt, closure: () -> ()) {
      0|  110|        var pendingFlags = flags
      0|  111|        pendingFlags[Filter.pending] = true
      0|  112|        self.it(description, flags: pendingFlags, file: file, line: line, closure: closure)
      0|  113|    }
       |  114|
      0|  115|    internal func itBehavesLike(name: String, sharedExampleContext: SharedExampleContext, flags: FilterFlags, file: String, line: UInt) {
      0|  116|        guard currentExampleMetadata == nil else {
      0|  117|            raiseError("'itBehavesLike' cannot be used inside '\(currentPhase)', 'itBehavesLike' may only be used inside 'context' or 'describe'. ")
      0|  118|        }
      0|  119|        let callsite = Callsite(file: file, line: line)
      0|  120|        let closure = World.sharedWorld.sharedExample(name)
      0|  121|
      0|  122|        let group = ExampleGroup(description: name, flags: flags)
      0|  123|        currentExampleGroup.appendExampleGroup(group)
      0|  124|        performWithCurrentExampleGroup(group) {
      0|  125|            closure(sharedExampleContext)
      0|  126|        }
      0|  127|
      0|  128|        group.walkDownExamples { (example: Example) in
      0|  129|            example.isSharedExample = true
      0|  130|            example.callsite = callsite
      0|  131|        }
      0|  132|    }
       |  133|
       |  134|#if _runtime(_ObjC)
       |  135|    @objc(itWithDescription:flags:file:line:closure:)
      0|  136|    private func objc_it(description: String, flags: FilterFlags, file: String, line: UInt, closure: () -> ()) {
      0|  137|        it(description, flags: flags, file: file, line: line, closure: closure)
      0|  138|    }
       |  139|
       |  140|    @objc(fitWithDescription:flags:file:line:closure:)
      0|  141|    private func objc_fit(description: String, flags: FilterFlags, file: String, line: UInt, closure: () -> ()) {
      0|  142|        fit(description, flags: flags, file: file, line: line, closure: closure)
      0|  143|    }
       |  144|
       |  145|    @objc(xitWithDescription:flags:file:line:closure:)
      0|  146|    private func objc_xit(description: String, flags: FilterFlags, file: String, line: UInt, closure: () -> ()) {
      0|  147|        xit(description, flags: flags, file: file, line: line, closure: closure)
      0|  148|    }
       |  149|
       |  150|    @objc(itBehavesLikeSharedExampleNamed:sharedExampleContext:flags:file:line:)
      0|  151|    private func objc_itBehavesLike(name: String, sharedExampleContext: SharedExampleContext, flags: FilterFlags, file: String, line: UInt) {
      0|  152|        itBehavesLike(name, sharedExampleContext: sharedExampleContext, flags: flags, file: file, line: line)
      0|  153|    }
       |  154|#endif
       |  155|
      0|  156|    internal func pending(description: String, closure: () -> ()) {
      0|  157|        print("Pending: \(description)")
      0|  158|    }
       |  159|
      0|  160|    private var currentPhase: String {
      0|  161|        if beforesCurrentlyExecuting {
      0|  162|            return "beforeEach"
      0|  163|        } else if aftersCurrentlyExecuting {
      0|  164|            return "afterEach"
      0|  165|        }
      0|  166|
      0|  167|        return "it"
      0|  168|    }
       |  169|}

/Users/wangjie/Developer/iOS/MyPods/KissPaginate/Example/Pods/Quick/Sources/Quick/ErrorUtility.swift:
       |    1|import Foundation
       |    2|
      0|    3|@noreturn internal func raiseError(message: String) {
      0|    4|#if _runtime(_ObjC)
      0|    5|    NSException(name: NSInternalInconsistencyException, reason: message, userInfo: nil).raise()
      0|    6|#endif
      0|    7|
      0|    8|    // This won't be reached when ObjC is available and the exception above is raisd
      0|    9|    fatalError(message)
      0|   10|}

/Users/wangjie/Developer/iOS/MyPods/KissPaginate/Example/Pods/Quick/Sources/Quick/Example.swift:
       |    1|import Foundation
       |    2|
       |    3|private var numberOfExamplesRun = 0
       |    4|
       |    5|/**
       |    6|    Examples, defined with the `it` function, use assertions to
       |    7|    demonstrate how code should behave. These are like "tests" in XCTest.
       |    8|*/
       |    9|final public class Example: NSObject {
       |   10|    /**
       |   11|        A boolean indicating whether the example is a shared example;
       |   12|        i.e.: whether it is an example defined with `itBehavesLike`.
       |   13|    */
       |   14|    public var isSharedExample = false
       |   15|
       |   16|    /**
       |   17|        The site at which the example is defined.
       |   18|        This must be set correctly in order for Xcode to highlight
       |   19|        the correct line in red when reporting a failure.
       |   20|    */
       |   21|    public var callsite: Callsite
       |   22|
       |   23|    weak internal var group: ExampleGroup?
       |   24|
       |   25|    private let internalDescription: String
       |   26|    private let closure: () -> ()
       |   27|    private let flags: FilterFlags
       |   28|
     14|   29|    internal init(description: String, callsite: Callsite, flags: FilterFlags, closure: () -> ()) {
     14|   30|        self.internalDescription = description
     14|   31|        self.closure = closure
     14|   32|        self.callsite = callsite
     14|   33|        self.flags = flags
     14|   34|    }
       |   35|    
     28|   36|    public override var description: String {
     28|   37|        return internalDescription
     28|   38|    }
       |   39|
       |   40|    /**
       |   41|        The example name. A name is a concatenation of the name of
       |   42|        the example group the example belongs to, followed by the
       |   43|        description of the example itself.
       |   44|
       |   45|        The example name is used to generate a test method selector
       |   46|        to be displayed in Xcode's test navigator.
       |   47|    */
     28|   48|    public var name: String {
     28|   49|        switch group!.name {
     28|   50|        case .Some(let groupName): return "\(groupName), \(description)"
      0|   51|        case .None: return description
     28|   52|        }
     28|   53|    }
       |   54|
       |   55|    /**
       |   56|        Executes the example closure, as well as all before and after
       |   57|        closures defined in the its surrounding example groups.
       |   58|    */
     14|   59|    public func run() {
     14|   60|        let world = World.sharedWorld
     14|   61|
      1|   62|        if numberOfExamplesRun == 0 {
      1|   63|            world.suiteHooks.executeBefores()
     14|   64|        }
     14|   65|
     14|   66|        let exampleMetadata = ExampleMetadata(example: self, exampleIndex: numberOfExamplesRun)
     14|   67|        world.currentExampleMetadata = exampleMetadata
     14|   68|
     14|   69|        world.exampleHooks.executeBefores(exampleMetadata)
     14|   70|        group!.phase = .BeforesExecuting
     39|   71|        for before in group!.befores {
     39|   72|            before(exampleMetadata: exampleMetadata)
     14|   73|        }
     14|   74|        group!.phase = .BeforesFinished
     14|   75|
     14|   76|        closure()
     14|   77|
     14|   78|        group!.phase = .AftersExecuting
      0|   79|        for after in group!.afters {
      0|   80|            after(exampleMetadata: exampleMetadata)
     14|   81|        }
     14|   82|        group!.phase = .AftersFinished
     14|   83|        world.exampleHooks.executeAfters(exampleMetadata)
     14|   84|
     14|   85|        numberOfExamplesRun += 1
     14|   86|
     14|   87|        if !world.isRunningAdditionalSuites && numberOfExamplesRun >= world.includedExampleCount {
      1|   88|            world.suiteHooks.executeAfters()
     14|   89|        }
     14|   90|    }
       |   91|
       |   92|    /**
       |   93|        Evaluates the filter flags set on this example and on the example groups
       |   94|        this example belongs to. Flags set on the example are trumped by flags on
       |   95|        the example group it belongs to. Flags on inner example groups are trumped
       |   96|        by flags on outer example groups.
       |   97|    */
    266|   98|    internal var filterFlags: FilterFlags {
    266|   99|        var aggregateFlags = flags
      0|  100|        for (key, value) in group!.filterFlags {
      0|  101|            aggregateFlags[key] = value
    266|  102|        }
    266|  103|        return aggregateFlags
    266|  104|    }
       |  105|}
       |  106|
       |  107|/**
       |  108|    Returns a boolean indicating whether two Example objects are equal.
       |  109|    If two examples are defined at the exact same callsite, they must be equal.
       |  110|*/
      0|  111|public func ==(lhs: Example, rhs: Example) -> Bool {
      0|  112|    return lhs.callsite == rhs.callsite
      0|  113|}

/Users/wangjie/Developer/iOS/MyPods/KissPaginate/Example/Pods/Quick/Sources/Quick/ExampleGroup.swift:
       |    1|import Foundation
       |    2|
       |    3|/**
       |    4|    Example groups are logical groupings of examples, defined with
       |    5|    the `describe` and `context` functions. Example groups can share
       |    6|    setup and teardown code.
       |    7|*/
       |    8|final public class ExampleGroup: NSObject {
       |    9|    weak internal var parent: ExampleGroup?
       |   10|    internal let hooks = ExampleHooks()
       |   11|    
       |   12|    internal var phase: HooksPhase = .NothingExecuted
       |   13|
       |   14|    private let internalDescription: String
       |   15|    private let flags: FilterFlags
       |   16|    private let isInternalRootExampleGroup: Bool
       |   17|    private var childGroups = [ExampleGroup]()
       |   18|    private var childExamples = [Example]()
       |   19|
      9|   20|    internal init(description: String, flags: FilterFlags, isInternalRootExampleGroup: Bool = false) {
      9|   21|        self.internalDescription = description
      9|   22|        self.flags = flags
      9|   23|        self.isInternalRootExampleGroup = isInternalRootExampleGroup
      9|   24|    }
       |   25|
     78|   26|    public override var description: String {
     78|   27|        return internalDescription
     78|   28|    }
       |   29|
       |   30|    /**
       |   31|        Returns a list of examples that belong to this example group,
       |   32|        or to any of its descendant example groups.
       |   33|    */
     18|   34|    public var examples: [Example] {
     18|   35|        var examples = childExamples
     14|   36|        for group in childGroups {
     14|   37|            examples.appendContentsOf(group.examples)
     18|   38|        }
     18|   39|        return examples
     18|   40|    }
       |   41|
    106|   42|    internal var name: String? {
     78|   43|        if let parent = parent {
     78|   44|            switch(parent.name) {
     50|   45|            case .Some(let name): return "\(name), \(description)"
     28|   46|            case .None: return description
     78|   47|            }
    106|   48|        } else {
     28|   49|            return isInternalRootExampleGroup ? nil : description
     78|   50|        }
     78|   51|    }
       |   52|
    266|   53|    internal var filterFlags: FilterFlags {
    266|   54|        var aggregateFlags = flags
    741|   55|        walkUp() { (group: ExampleGroup) -> () in
      0|   56|            for (key, value) in group.flags {
      0|   57|                aggregateFlags[key] = value
    741|   58|            }
    741|   59|        }
    266|   60|        return aggregateFlags
    266|   61|    }
       |   62|
     14|   63|    internal var befores: [BeforeExampleWithMetadataClosure] {
     14|   64|        var closures = Array(hooks.befores.reverse())
     39|   65|        walkUp() { (group: ExampleGroup) -> () in
     39|   66|            closures.appendContentsOf(Array(group.hooks.befores.reverse()))
     39|   67|        }
     14|   68|        return Array(closures.reverse())
     14|   69|    }
       |   70|
     14|   71|    internal var afters: [AfterExampleWithMetadataClosure] {
     14|   72|        var closures = hooks.afters
     39|   73|        walkUp() { (group: ExampleGroup) -> () in
     39|   74|            closures.appendContentsOf(group.hooks.afters)
     39|   75|        }
     14|   76|        return closures
     14|   77|    }
       |   78|
    154|   79|    internal func walkDownExamples(callback: (example: Example) -> ()) {
    238|   80|        for example in childExamples {
    238|   81|            callback(example: example)
    154|   82|        }
    119|   83|        for group in childGroups {
    119|   84|            group.walkDownExamples(callback)
    154|   85|        }
    154|   86|    }
       |   87|
      7|   88|    internal func appendExampleGroup(group: ExampleGroup) {
      7|   89|        group.parent = self
      7|   90|        childGroups.append(group)
      7|   91|    }
       |   92|
     14|   93|    internal func appendExample(example: Example) {
     14|   94|        example.group = self
     14|   95|        childExamples.append(example)
     14|   96|    }
       |   97|
    294|   98|    private func walkUp(callback: (group: ExampleGroup) -> ()) {
    294|   99|        var group = self
    819|  100|        while let parent = group.parent {
    819|  101|            callback(group: parent)
    819|  102|            group = parent
    294|  103|        }
    294|  104|    }
       |  105|}

/Users/wangjie/Developer/iOS/MyPods/KissPaginate/Example/Pods/Quick/Sources/Quick/ExampleMetadata.swift:
       |    1|import Foundation
       |    2|
       |    3|/**
       |    4|    A class that encapsulates information about an example,
       |    5|    including the index at which the example was executed, as
       |    6|    well as the example itself.
       |    7|*/
       |    8|final public class ExampleMetadata: NSObject {
       |    9|    /**
       |   10|        The example for which this metadata was collected.
       |   11|    */
       |   12|    public let example: Example
       |   13|
       |   14|    /**
       |   15|        The index at which this example was executed in the
       |   16|        test suite.
       |   17|    */
       |   18|    public let exampleIndex: Int
       |   19|
     14|   20|    internal init(example: Example, exampleIndex: Int) {
     14|   21|        self.example = example
     14|   22|        self.exampleIndex = exampleIndex
     14|   23|    }
       |   24|}

/Users/wangjie/Developer/iOS/MyPods/KissPaginate/Example/Pods/Quick/Sources/Quick/Filter.swift:
       |    1|import Foundation
       |    2|
       |    3|/**
       |    4|    A mapping of string keys to booleans that can be used to
       |    5|    filter examples or example groups. For example, a "focused"
       |    6|    example would have the flags [Focused: true].
       |    7|*/
       |    8|public typealias FilterFlags = [String: Bool]
       |    9|
       |   10|/**
       |   11|    A namespace for filter flag keys, defined primarily to make the
       |   12|    keys available in Objective-C.
       |   13|*/
       |   14|final public class Filter: NSObject {
       |   15|    /**
       |   16|        Example and example groups with [Focused: true] are included in test runs,
       |   17|        excluding all other examples without this flag. Use this to only run one or
       |   18|        two tests that you're currently focusing on.
       |   19|    */
    238|   20|    public class var focused: String {
    238|   21|        return "focused"
    238|   22|    }
       |   23|
       |   24|    /**
       |   25|        Example and example groups with [Pending: true] are excluded from test runs.
       |   26|        Use this to temporarily suspend examples that you know do not pass yet.
       |   27|    */
     28|   28|    public class var pending: String {
     28|   29|        return "pending"
     28|   30|    }
       |   31|}

/Users/wangjie/Developer/iOS/MyPods/KissPaginate/Example/Pods/Quick/Sources/Quick/Hooks/ExampleHooks.swift:
       |    1|/**
       |    2|    A container for closures to be executed before and after each example.
       |    3|*/
       |    4|final internal class ExampleHooks {
       |    5|    internal var befores: [BeforeExampleWithMetadataClosure] = []
       |    6|    internal var afters: [AfterExampleWithMetadataClosure] = []
       |    7|    internal var phase: HooksPhase = .NothingExecuted
       |    8|
      0|    9|    internal func appendBefore(closure: BeforeExampleWithMetadataClosure) {
      0|   10|        befores.append(closure)
      0|   11|    }
       |   12|
      7|   13|    internal func appendBefore(closure: BeforeExampleClosure) {
     39|   14|        befores.append { (exampleMetadata: ExampleMetadata) in closure() }
      7|   15|    }
       |   16|
      0|   17|    internal func appendAfter(closure: AfterExampleWithMetadataClosure) {
      0|   18|        afters.append(closure)
      0|   19|    }
       |   20|
      0|   21|    internal func appendAfter(closure: AfterExampleClosure) {
      0|   22|        afters.append { (exampleMetadata: ExampleMetadata) in closure() }
      0|   23|    }
       |   24|
     14|   25|    internal func executeBefores(exampleMetadata: ExampleMetadata) {
     14|   26|        phase = .BeforesExecuting
      0|   27|        for before in befores {
      0|   28|            before(exampleMetadata: exampleMetadata)
     14|   29|        }
     14|   30|        
     14|   31|        phase = .BeforesFinished
     14|   32|    }
       |   33|
     14|   34|    internal func executeAfters(exampleMetadata: ExampleMetadata) {
     14|   35|        phase = .AftersExecuting
      0|   36|        for after in afters {
      0|   37|            after(exampleMetadata: exampleMetadata)
     14|   38|        }
     14|   39|
     14|   40|        phase = .AftersFinished
     14|   41|    }
       |   42|}

/Users/wangjie/Developer/iOS/MyPods/KissPaginate/Example/Pods/Quick/Sources/Quick/Hooks/SuiteHooks.swift:
       |    1|/**
       |    2|    A container for closures to be executed before and after all examples.
       |    3|*/
       |    4|final internal class SuiteHooks {
       |    5|    internal var befores: [BeforeSuiteClosure] = []
       |    6|    internal var afters: [AfterSuiteClosure] = []
       |    7|    internal var phase: HooksPhase = .NothingExecuted
       |    8|
      0|    9|    internal func appendBefore(closure: BeforeSuiteClosure) {
      0|   10|        befores.append(closure)
      0|   11|    }
       |   12|
      0|   13|    internal func appendAfter(closure: AfterSuiteClosure) {
      0|   14|        afters.append(closure)
      0|   15|    }
       |   16|
      1|   17|    internal func executeBefores() {
      1|   18|        phase = .BeforesExecuting
      0|   19|        for before in befores {
      0|   20|            before()
      1|   21|        }
      1|   22|        phase = .BeforesFinished
      1|   23|    }
       |   24|
      1|   25|    internal func executeAfters() {
      1|   26|        phase = .AftersExecuting
      0|   27|        for after in afters {
      0|   28|            after()
      1|   29|        }
      1|   30|        phase = .AftersFinished
      1|   31|    }
       |   32|}

/Users/wangjie/Developer/iOS/MyPods/KissPaginate/Example/Pods/Quick/Sources/Quick/NSBundle+CurrentTestBundle.swift:
       |    1|#if os(OSX) || os(iOS) || os(watchOS) || os(tvOS)
       |    2|
       |    3|import Foundation
       |    4|
       |    5|extension NSBundle {
       |    6|
       |    7|    /**
       |    8|     Locates the first bundle with a '.xctest' file extension.
       |    9|     */
      0|   10|    internal static var currentTestBundle: NSBundle? {
      0|   11|        return allBundles().lazy
      0|   12|            .filter {
      0|   13|                $0.bundlePath.hasSuffix(".xctest")
      0|   14|            }
      0|   15|            .first
      0|   16|    }
       |   17|
       |   18|}
       |   19|
       |   20|#endif

/Users/wangjie/Developer/iOS/MyPods/KissPaginate/Example/Pods/Quick/Sources/Quick/NSString+QCKSelectorName.m:
       |    1|#import "NSString+QCKSelectorName.h"
       |    2|
       |    3|@implementation NSString (QCKSelectorName)
       |    4|
     28|    5|- (NSString *)qck_selectorName {
     28|    6|    static NSMutableCharacterSet *invalidCharacters = nil;
     28|    7|    static dispatch_once_t onceToken;
     28|    8|    dispatch_once(&onceToken, ^{
      1|    9|        invalidCharacters = [NSMutableCharacterSet new];
      1|   10|
      1|   11|        NSCharacterSet *whitespaceCharacterSet = [NSCharacterSet whitespaceCharacterSet];
      1|   12|        NSCharacterSet *newlineCharacterSet = [NSCharacterSet newlineCharacterSet];
      1|   13|        NSCharacterSet *illegalCharacterSet = [NSCharacterSet illegalCharacterSet];
      1|   14|        NSCharacterSet *controlCharacterSet = [NSCharacterSet controlCharacterSet];
      1|   15|        NSCharacterSet *punctuationCharacterSet = [NSCharacterSet punctuationCharacterSet];
      1|   16|        NSCharacterSet *nonBaseCharacterSet = [NSCharacterSet nonBaseCharacterSet];
      1|   17|        NSCharacterSet *symbolCharacterSet = [NSCharacterSet symbolCharacterSet];
      1|   18|
      1|   19|        [invalidCharacters formUnionWithCharacterSet:whitespaceCharacterSet];
      1|   20|        [invalidCharacters formUnionWithCharacterSet:newlineCharacterSet];
      1|   21|        [invalidCharacters formUnionWithCharacterSet:illegalCharacterSet];
      1|   22|        [invalidCharacters formUnionWithCharacterSet:controlCharacterSet];
      1|   23|        [invalidCharacters formUnionWithCharacterSet:punctuationCharacterSet];
      1|   24|        [invalidCharacters formUnionWithCharacterSet:nonBaseCharacterSet];
      1|   25|        [invalidCharacters formUnionWithCharacterSet:symbolCharacterSet];
      1|   26|    });
     28|   27|
     28|   28|    NSArray *validComponents = [self componentsSeparatedByCharactersInSet:invalidCharacters];
     28|   29|
     28|   30|    NSString *result = [validComponents componentsJoinedByString:@"_"];
     28|   31|    
     28|   32|    return ([result length] == 0
      0|   33|            ? @"_"
     28|   34|            : result);
     28|   35|}
       |   36|
       |   37|@end

/Users/wangjie/Developer/iOS/MyPods/KissPaginate/Example/Pods/Quick/Sources/Quick/QuickSelectedTestSuiteBuilder.swift:
       |    1|#if os(OSX) || os(iOS) || os(watchOS) || os(tvOS)
       |    2|
       |    3|/**
       |    4| Responsible for building a "Selected tests" suite. This corresponds to a single
       |    5| spec, and all its examples.
       |    6| */
       |    7|internal class QuickSelectedTestSuiteBuilder: QuickTestSuiteBuilder {
       |    8|
       |    9|    /**
       |   10|     The test spec class to run.
       |   11|     */
       |   12|    let testCaseClass: AnyClass!
       |   13|
       |   14|    /**
       |   15|     For Objective-C classes, returns the class name. For Swift classes without,
       |   16|     an explicit Objective-C name, returns a module-namespaced class name
       |   17|     (e.g., "FooTests.FooSpec").
       |   18|     */
      0|   19|    var testSuiteClassName: String {
      0|   20|        return NSStringFromClass(testCaseClass)
      0|   21|    }
       |   22|
       |   23|    /**
       |   24|     Given a test case name:
       |   25|
       |   26|        FooSpec/testFoo
       |   27|
       |   28|     Optionally constructs a test suite builder for the named test case class
       |   29|     in the running test bundle.
       |   30|
       |   31|     If no test bundle can be found, or the test case class can't be found,
       |   32|     initialization fails and returns `nil`.
       |   33|     */
      0|   34|    init?(forTestCaseWithName name: String) {
      0|   35|        guard let testCaseClass = testCaseClassForTestCaseWithName(name) else {
      0|   36|            self.testCaseClass = nil
      0|   37|            return nil
      0|   38|        }
      0|   39|
      0|   40|        self.testCaseClass = testCaseClass
      0|   41|    }
       |   42|
       |   43|    /**
       |   44|     Returns a `QuickTestSuite` that runs the associated test case class.
       |   45|     */
      0|   46|    func buildTestSuite() -> QuickTestSuite {
      0|   47|        return QuickTestSuite(forTestCaseClass: testCaseClass)
      0|   48|    }
       |   49|
       |   50|}
       |   51|
       |   52|/**
       |   53| Searches `NSBundle.allBundles()` for an xctest bundle, then looks up the named
       |   54| test case class in that bundle.
       |   55|
       |   56| Returns `nil` if a bundle or test case class cannot be found.
       |   57| */
      0|   58|private func testCaseClassForTestCaseWithName(name: String) -> AnyClass? {
      0|   59|    func extractClassName(name: String) -> String? {
      0|   60|        return name.characters.split("/").first.map(String.init)
      0|   61|    }
      0|   62|
      0|   63|    guard let className = extractClassName(name) else { return nil }
      0|   64|    guard let bundle = NSBundle.currentTestBundle else { return nil }
      0|   65|
      0|   66|    if let testCaseClass = bundle.classNamed(className) { return testCaseClass }
      0|   67|
      0|   68|    guard let moduleName = bundle.bundlePath.fileName else { return nil }
      0|   69|
      0|   70|    return NSClassFromString("\(moduleName).\(className)")
      0|   71|}
       |   72|
       |   73|#endif

/Users/wangjie/Developer/iOS/MyPods/KissPaginate/Example/Pods/Quick/Sources/Quick/QuickSpec.m:
       |    1|#import "QuickSpec.h"
       |    2|#import "QuickConfiguration.h"
       |    3|#import "NSString+QCKSelectorName.h"
       |    4|#import "World.h"
       |    5|#import <objc/runtime.h>
       |    6|
       |    7|static QuickSpec *currentSpec = nil;
       |    8|
       |    9|const void * const QCKExampleKey = &QCKExampleKey;
       |   10|
       |   11|@interface QuickSpec ()
       |   12|@property (nonatomic, strong) Example *example;
       |   13|@end
       |   14|
       |   15|@implementation QuickSpec
       |   16|
       |   17|#pragma mark - XCTestCase Overrides
       |   18|
       |   19|/**
       |   20| The runtime sends initialize to each class in a program just before the class, or any class
       |   21| that inherits from it, is sent its first message from within the program. QuickSpec hooks into
       |   22| this event to compile the example groups for this spec subclass.
       |   23|
       |   24| If an exception occurs when compiling the examples, report it to the user. Chances are they
       |   25| included an expectation outside of a "it", "describe", or "context" block.
       |   26| */
      2|   27|+ (void)initialize {
      2|   28|    [QuickConfiguration initialize];
      2|   29|
      2|   30|    World *world = [World sharedWorld];
      2|   31|    [world performWithCurrentExampleGroup:[world rootExampleGroupForSpecClass:self] closure:^{
      2|   32|        QuickSpec *spec = [self new];
      2|   33|
      2|   34|        @try {
      2|   35|            [spec spec];
      2|   36|        }
      2|   37|        @catch (NSException *exception) {
      2|   38|            [NSException raise:NSInternalInconsistencyException
      2|   39|                        format:@"An exception occurred when building Quick's example groups.\n"
      2|   40|             @"Some possible reasons this might happen include:\n\n"
      2|   41|             @"- An 'expect(...).to' expectation was evaluated outside of "
      2|   42|             @"an 'it', 'context', or 'describe' block\n"
      2|   43|             @"- 'sharedExamples' was called twice with the same name\n"
      2|   44|             @"- 'itBehavesLike' was called with a name that is not registered as a shared example\n\n"
      2|   45|             @"Here's the original exception: '%@', reason: '%@', userInfo: '%@'",
      2|   46|             exception.name, exception.reason, exception.userInfo];
      2|   47|        }
      2|   48|        [self testInvocations];
      2|   49|    }];
      2|   50|}
       |   51|
       |   52|/**
       |   53| Invocations for each test method in the test case. QuickSpec overrides this method to define a
       |   54| new method for each example defined in +[QuickSpec spec].
       |   55|
       |   56| @return An array of invocations that execute the newly defined example methods.
       |   57| */
      4|   58|+ (NSArray *)testInvocations {
      4|   59|    NSArray *examples = [[World sharedWorld] examplesForSpecClass:[self class]];
      4|   60|    NSMutableArray *invocations = [NSMutableArray arrayWithCapacity:[examples count]];
      4|   61|    
      4|   62|    NSMutableSet<NSString*> *selectorNames = [NSMutableSet set];
      4|   63|    
     28|   64|    for (Example *example in examples) {
     28|   65|        SEL selector = [self addInstanceMethodForExample:example classSelectorNames:selectorNames];
     28|   66|        NSInvocation *invocation = [self invocationForInstanceMethodWithSelector:selector
     28|   67|                                                                         example:example];
     28|   68|        [invocations addObject:invocation];
     28|   69|    }
      4|   70|
      4|   71|    return invocations;
      4|   72|}
       |   73|
       |   74|/**
       |   75| XCTest sets the invocation for the current test case instance using this setter.
       |   76| QuickSpec hooks into this event to give the test case a reference to the current example.
       |   77| It will need this reference to correctly report its name to XCTest.
       |   78| */
     16|   79|- (void)setInvocation:(NSInvocation *)invocation {
     16|   80|    self.example = objc_getAssociatedObject(invocation, QCKExampleKey);
     16|   81|    [super setInvocation:invocation];
     16|   82|}
       |   83|
       |   84|#pragma mark - Public Interface
       |   85|
      1|   86|- (void)spec { }
       |   87|
       |   88|#pragma mark - Internal Methods
       |   89|
       |   90|/**
       |   91| QuickSpec uses this method to dynamically define a new instance method for the
       |   92| given example. The instance method runs the example, catching any exceptions.
       |   93| The exceptions are then reported as test failures.
       |   94|
       |   95| In order to report the correct file and line number, examples must raise exceptions
       |   96| containing following keys in their userInfo:
       |   97|
       |   98| - "SenTestFilenameKey": A String representing the file name
       |   99| - "SenTestLineNumberKey": An Int representing the line number
       |  100|
       |  101| These keys used to be used by SenTestingKit, and are still used by some testing tools
       |  102| in the wild. See: https://github.com/Quick/Quick/pull/41
       |  103|
       |  104| @return The selector of the newly defined instance method.
       |  105| */
     28|  106|+ (SEL)addInstanceMethodForExample:(Example *)example classSelectorNames:(NSMutableSet<NSString*> *)selectorNames {
     14|  107|    IMP implementation = imp_implementationWithBlock(^(QuickSpec *self){
     14|  108|        currentSpec = self;
     14|  109|        [example run];
     14|  110|    });
     28|  111|    NSCharacterSet *characterSet = [NSCharacterSet alphanumericCharacterSet];
     28|  112|    NSMutableString *sanitizedFileName = [NSMutableString string];
  2.40k|  113|    for (NSUInteger i = 0; i < example.callsite.file.length; i++) {
  2.38k|  114|        unichar ch = [example.callsite.file characterAtIndex:i];
  2.38k|  115|        if ([characterSet characterIsMember:ch]) {
  2.10k|  116|            [sanitizedFileName appendFormat:@"%c", ch];
  2.10k|  117|        }
  2.38k|  118|    }
     28|  119|
     28|  120|    const char *types = [[NSString stringWithFormat:@"%s%s%s", @encode(id), @encode(id), @encode(SEL)] UTF8String];
     28|  121|    
     28|  122|    NSString *originalName = example.name.qck_selectorName;
     28|  123|    NSString *selectorName = originalName;
     28|  124|    NSUInteger i = 2;
     28|  125|    
     28|  126|    while ([selectorNames containsObject:selectorName]) {
      0|  127|        selectorName = [NSString stringWithFormat:@"%@_%tu", originalName, i++];
      0|  128|    }
     28|  129|    
     28|  130|    [selectorNames addObject:selectorName];
     28|  131|    
     28|  132|    SEL selector = NSSelectorFromString(selectorName);
     28|  133|    class_addMethod(self, selector, implementation, types);
     28|  134|
     28|  135|    return selector;
     28|  136|}
       |  137|
       |  138|+ (NSInvocation *)invocationForInstanceMethodWithSelector:(SEL)selector
     28|  139|                                                  example:(Example *)example {
     28|  140|    NSMethodSignature *signature = [self instanceMethodSignatureForSelector:selector];
     28|  141|    NSInvocation *invocation = [NSInvocation invocationWithMethodSignature:signature];
     28|  142|    invocation.selector = selector;
     28|  143|    objc_setAssociatedObject(invocation,
     28|  144|                             QCKExampleKey,
     28|  145|                             example,
     28|  146|                             OBJC_ASSOCIATION_RETAIN_NONATOMIC);
     28|  147|    return invocation;
     28|  148|}
       |  149|
       |  150|/**
       |  151| This method is used to record failures, whether they represent example
       |  152| expectations that were not met, or exceptions raised during test setup
       |  153| and teardown. By default, the failure will be reported as an
       |  154| XCTest failure, and the example will be highlighted in Xcode.
       |  155| */
       |  156|- (void)recordFailureWithDescription:(NSString *)description
       |  157|                              inFile:(NSString *)filePath
       |  158|                              atLine:(NSUInteger)lineNumber
      0|  159|                            expected:(BOOL)expected {
      0|  160|    if (self.example.isSharedExample) {
      0|  161|        filePath = self.example.callsite.file;
      0|  162|        lineNumber = self.example.callsite.line;
      0|  163|    }
      0|  164|    [currentSpec.testRun recordFailureWithDescription:description
      0|  165|                                               inFile:filePath
      0|  166|                                               atLine:lineNumber
      0|  167|                                             expected:expected];
      0|  168|}
       |  169|
       |  170|@end

/Users/wangjie/Developer/iOS/MyPods/KissPaginate/Example/Pods/Quick/Sources/Quick/QuickTestSuite.swift:
       |    1|#if os(OSX) || os(iOS) || os(watchOS) || os(tvOS)
       |    2|
       |    3|import XCTest
       |    4|
       |    5|/**
       |    6| This protocol defines the role of an object that builds test suites.
       |    7| */
       |    8|internal protocol QuickTestSuiteBuilder {
       |    9|
       |   10|    /**
       |   11|     Construct a `QuickTestSuite` instance with the appropriate test cases added as tests.
       |   12|
       |   13|     Subsequent calls to this method should return equivalent test suites.
       |   14|     */
       |   15|    func buildTestSuite() -> QuickTestSuite
       |   16|
       |   17|}
       |   18|
       |   19|/**
       |   20| A base class for a class cluster of Quick test suites, that should correctly
       |   21| build dynamic test suites for XCTest to execute.
       |   22| */
       |   23|public class QuickTestSuite: XCTestSuite {
       |   24|
       |   25|    private static var builtTestSuites: Set<String> = Set()
       |   26|
       |   27|    /**
       |   28|     Construct a test suite for a specific, selected subset of test cases (rather
       |   29|     than the default, which as all test cases).
       |   30|
       |   31|     If this method is called multiple times for the same test case class, e.g..
       |   32|
       |   33|        FooSpec/testFoo
       |   34|        FooSpec/testBar
       |   35|
       |   36|     It is expected that the first call should return a valid test suite, and
       |   37|     all subsequent calls should return `nil`.
       |   38|     */
      0|   39|    public static func selectedTestSuite(forTestCaseWithName name: String) -> QuickTestSuite? {
      0|   40|        guard let builder = QuickSelectedTestSuiteBuilder(forTestCaseWithName: name) else { return nil }
      0|   41|
      0|   42|        if builtTestSuites.contains(builder.testSuiteClassName) {
      0|   43|            return nil
      0|   44|        } else {
      0|   45|            builtTestSuites.insert(builder.testSuiteClassName)
      0|   46|            return builder.buildTestSuite()
      0|   47|        }
      0|   48|    }
       |   49|
       |   50|}
       |   51|
       |   52|#endif

/Users/wangjie/Developer/iOS/MyPods/KissPaginate/Example/Pods/Quick/Sources/Quick/String+FileName.swift:
       |    1|import Foundation
       |    2|
       |    3|extension String {
       |    4|
       |    5|    /**
       |    6|     If the receiver represents a path, returns its file name with a file extension.
       |    7|     */
      0|    8|    var fileName: String? {
      0|    9|        return NSURL(string: self)?.URLByDeletingPathExtension?.lastPathComponent
      0|   10|    }
       |   11|
       |   12|}

/Users/wangjie/Developer/iOS/MyPods/KissPaginate/Example/Pods/Quick/Sources/Quick/World.swift:
       |    1|import Foundation
       |    2|
       |    3|/**
       |    4|    A closure that, when evaluated, returns a dictionary of key-value
       |    5|    pairs that can be accessed from within a group of shared examples.
       |    6|*/
       |    7|public typealias SharedExampleContext = () -> (NSDictionary)
       |    8|
       |    9|/**
       |   10|    A closure that is used to define a group of shared examples. This
       |   11|    closure may contain any number of example and example groups.
       |   12|*/
       |   13|public typealias SharedExampleClosure = (SharedExampleContext) -> ()
       |   14|
       |   15|/**
       |   16|    A collection of state Quick builds up in order to work its magic.
       |   17|    World is primarily responsible for maintaining a mapping of QuickSpec
       |   18|    classes to root example groups for those classes.
       |   19|
       |   20|    It also maintains a mapping of shared example names to shared
       |   21|    example closures.
       |   22|
       |   23|    You may configure how Quick behaves by calling the -[World configure:]
       |   24|    method from within an overridden +[QuickConfiguration configure:] method.
       |   25|*/
       |   26|final internal class World: NSObject {
       |   27|    /**
       |   28|        The example group that is currently being run.
       |   29|        The DSL requires that this group is correctly set in order to build a
       |   30|        correct hierarchy of example groups and their examples.
       |   31|    */
       |   32|    internal var currentExampleGroup: ExampleGroup!
       |   33|
       |   34|    /**
       |   35|        The example metadata of the test that is currently being run.
       |   36|        This is useful for using the Quick test metadata (like its name) at
       |   37|        runtime.
       |   38|    */
       |   39|
       |   40|    internal var currentExampleMetadata: ExampleMetadata?
       |   41|
       |   42|    /**
       |   43|        A flag that indicates whether additional test suites are being run
       |   44|        within this test suite. This is only true within the context of Quick
       |   45|        functional tests.
       |   46|    */
       |   47|    internal var isRunningAdditionalSuites = false
       |   48|
       |   49|    private var specs: Dictionary<String, ExampleGroup> = [:]
       |   50|    private var sharedExamples: [String: SharedExampleClosure] = [:]
       |   51|    private let configuration = Configuration()
       |   52|    private var isConfigurationFinalized = false
       |   53|
     56|   54|    internal var exampleHooks: ExampleHooks {return configuration.exampleHooks }
     30|   55|    internal var suiteHooks: SuiteHooks { return configuration.suiteHooks }
       |   56|
       |   57|    // MARK: Singleton Constructor
       |   58|
      1|   59|    private override init() {}
       |   60|    static let sharedWorld = World()
       |   61|
       |   62|    // MARK: Public Interface
       |   63|
       |   64|    /**
       |   65|        Exposes the World's Configuration object within the scope of the closure
       |   66|        so that it may be configured. This method must not be called outside of
       |   67|        an overridden +[QuickConfiguration configure:] method.
       |   68|
       |   69|        - parameter closure:  A closure that takes a Configuration object that can
       |   70|                         be mutated to change Quick's behavior.
       |   71|    */
      0|   72|    internal func configure(closure: QuickConfigurer) {
      0|   73|        assert(!isConfigurationFinalized,
      0|   74|               "Quick cannot be configured outside of a +[QuickConfiguration configure:] method. You should not call -[World configure:] directly. Instead, subclass QuickConfiguration and override the +[QuickConfiguration configure:] method.")
      0|   75|        closure(configuration: configuration)
      0|   76|    }
       |   77|
       |   78|    /**
       |   79|        Finalizes the World's configuration.
       |   80|        Any subsequent calls to World.configure() will raise.
       |   81|    */
      1|   82|    internal func finalizeConfiguration() {
      1|   83|        isConfigurationFinalized = true
      1|   84|    }
       |   85|
       |   86|    /**
       |   87|        Returns an internally constructed root example group for the given
       |   88|        QuickSpec class.
       |   89|
       |   90|        A root example group with the description "root example group" is lazily
       |   91|        initialized for each QuickSpec class. This root example group wraps the
       |   92|        top level of a -[QuickSpec spec] method--it's thanks to this group that
       |   93|        users can define beforeEach and it closures at the top level, like so:
       |   94|
       |   95|            override func spec() {
       |   96|                // These belong to the root example group
       |   97|                beforeEach {}
       |   98|                it("is at the top level") {}
       |   99|            }
       |  100|
       |  101|        - parameter cls: The QuickSpec class for which to retrieve the root example group.
       |  102|        - returns: The root example group for the class.
       |  103|    */
      6|  104|    internal func rootExampleGroupForSpecClass(cls: AnyClass) -> ExampleGroup {
      6|  105|        #if _runtime(_ObjC)
      6|  106|            let name = NSStringFromClass(cls)
      6|  107|        #else
      6|  108|            let name = String(cls)
      6|  109|        #endif
      6|  110|
      4|  111|        if let group = specs[name] {
      4|  112|            return group
      2|  113|        } else {
      2|  114|            let group = ExampleGroup(
      2|  115|                description: "root example group",
      2|  116|                flags: [:],
      2|  117|                isInternalRootExampleGroup: true
      2|  118|            )
      2|  119|            specs[name] = group
      2|  120|            return group
      0|  121|        }
      0|  122|    }
       |  123|
       |  124|    /**
       |  125|        Returns all examples that should be run for a given spec class.
       |  126|        There are two filtering passes that occur when determining which examples should be run.
       |  127|        That is, these examples are the ones that are included by inclusion filters, and are
       |  128|        not excluded by exclusion filters.
       |  129|
       |  130|        - parameter specClass: The QuickSpec subclass for which examples are to be returned.
       |  131|        - returns: A list of examples to be run as test invocations.
       |  132|    */
      4|  133|    internal func examples(specClass: AnyClass) -> [Example] {
      4|  134|        // 1. Grab all included examples.
      4|  135|        let included = includedExamples
      4|  136|        // 2. Grab the intersection of (a) examples for this spec, and (b) included examples.
     28|  137|        let spec = rootExampleGroupForSpecClass(specClass).examples.filter { included.contains($0) }
      4|  138|        // 3. Remove all excluded examples.
     28|  139|        return spec.filter { example in
     28|  140|            !self.configuration.exclusionFilters.reduce(false) { $0 || $1(example: example) }
     28|  141|        }
      4|  142|    }
       |  143|
       |  144|#if _runtime(_ObjC)
       |  145|    @objc(examplesForSpecClass:)
      4|  146|    private func objc_examples(specClass: AnyClass) -> [Example] {
      4|  147|        return examples(specClass)
      4|  148|    }
       |  149|#endif
       |  150|
       |  151|    // MARK: Internal
       |  152|
      0|  153|    internal func registerSharedExample(name: String, closure: SharedExampleClosure) {
      0|  154|        raiseIfSharedExampleAlreadyRegistered(name)
      0|  155|        sharedExamples[name] = closure
      0|  156|    }
       |  157|
      0|  158|    internal func sharedExample(name: String) -> SharedExampleClosure {
      0|  159|        raiseIfSharedExampleNotRegistered(name)
      0|  160|        return sharedExamples[name]!
      0|  161|    }
       |  162|
     14|  163|    internal var includedExampleCount: Int {
     14|  164|        return includedExamples.count
     14|  165|    }
       |  166|    
     14|  167|    internal var beforesCurrentlyExecuting: Bool {
     14|  168|        let suiteBeforesExecuting = suiteHooks.phase == .BeforesExecuting
     14|  169|        let exampleBeforesExecuting = exampleHooks.phase == .BeforesExecuting
     14|  170|        var groupBeforesExecuting = false
      0|  171|        if let runningExampleGroup = currentExampleMetadata?.example.group {
      0|  172|            groupBeforesExecuting = runningExampleGroup.phase == .BeforesExecuting
     14|  173|        }
     14|  174|        
     14|  175|        return suiteBeforesExecuting || exampleBeforesExecuting || groupBeforesExecuting
     14|  176|    }
       |  177|    
     14|  178|    internal var aftersCurrentlyExecuting: Bool {
     14|  179|        let suiteAftersExecuting = suiteHooks.phase == .AftersExecuting
     14|  180|        let exampleAftersExecuting = exampleHooks.phase == .AftersExecuting
     14|  181|        var groupAftersExecuting = false
      0|  182|        if let runningExampleGroup = currentExampleMetadata?.example.group {
      0|  183|            groupAftersExecuting = runningExampleGroup.phase == .AftersExecuting
     14|  184|        }
     14|  185|        
     14|  186|        return suiteAftersExecuting || exampleAftersExecuting || groupAftersExecuting
     14|  187|    }
       |  188|
      9|  189|    internal func performWithCurrentExampleGroup(group: ExampleGroup, closure: () -> Void) {
      9|  190|        let previousExampleGroup = currentExampleGroup
      9|  191|        currentExampleGroup = group
      9|  192|
      9|  193|        closure()
      9|  194|
      9|  195|        currentExampleGroup = previousExampleGroup
      9|  196|    }
       |  197|
     18|  198|    private var allExamples: [Example] {
     18|  199|        var all: [Example] = []
     35|  200|        for (_, group) in specs {
    238|  201|            group.walkDownExamples { all.append($0) }
     18|  202|        }
     18|  203|        return all
     18|  204|    }
       |  205|
     18|  206|    private var includedExamples: [Example] {
     18|  207|        let all = allExamples
    238|  208|        let included = all.filter { example in
    238|  209|            return self.configuration.inclusionFilters.reduce(false) { $0 || $1(example: example) }
    238|  210|        }
     18|  211|
     18|  212|        if included.isEmpty && configuration.runAllWhenEverythingFiltered {
     18|  213|            return all
      0|  214|        } else {
      0|  215|            return included
      0|  216|        }
      0|  217|    }
       |  218|
      0|  219|    private func raiseIfSharedExampleAlreadyRegistered(name: String) {
      0|  220|        if sharedExamples[name] != nil {
      0|  221|            raiseError("A shared example named '\(name)' has already been registered.")
      0|  222|        }
      0|  223|    }
       |  224|
      0|  225|    private func raiseIfSharedExampleNotRegistered(name: String) {
      0|  226|        if sharedExamples[name] == nil {
      0|  227|            raiseError("No shared example named '\(name)' has been registered. Registered shared examples: '\(Array(sharedExamples.keys))'")
      0|  228|        }
      0|  229|    }
       |  230|}

/Users/wangjie/Developer/iOS/MyPods/KissPaginate/Example/Pods/Quick/Sources/Quick/XCTestSuite+QuickTestSuiteBuilder.m:
       |    1|#import <XCTest/XCTest.h>
       |    2|#import <objc/runtime.h>
       |    3|#import <Quick/Quick-Swift.h>
       |    4|
       |    5|@interface XCTestSuite (QuickTestSuiteBuilder)
       |    6|@end
       |    7|
       |    8|@implementation XCTestSuite (QuickTestSuiteBuilder)
       |    9|
       |   10|/**
       |   11| In order to ensure we can correctly build dynamic test suites, we need to
       |   12| replace some of the default test suite constructors.
       |   13| */
      1|   14|+ (void)load {
      1|   15|    Method testCaseWithName = class_getClassMethod(self, @selector(testSuiteForTestCaseWithName:));
      1|   16|    Method hooked_testCaseWithName = class_getClassMethod(self, @selector(qck_hooked_testSuiteForTestCaseWithName:));
      1|   17|    method_exchangeImplementations(testCaseWithName, hooked_testCaseWithName);
      1|   18|}
       |   19|
       |   20|/**
       |   21| The `+testSuiteForTestCaseWithName:` method is called when a specific test case
       |   22| class is run from the Xcode test navigator. If the built test suite is `nil`,
       |   23| Xcode will not run any tests for that test case.
       |   24|
       |   25| Given if the following test case class is run from the Xcode test navigator:
       |   26|
       |   27|    FooSpec
       |   28|        testFoo
       |   29|        testBar
       |   30|
       |   31| XCTest will invoke this once per test case, with test case names following this format:
       |   32|
       |   33|    FooSpec/testFoo
       |   34|    FooSpec/testBar
       |   35| */
      0|   36|+ (nullable instancetype)qck_hooked_testSuiteForTestCaseWithName:(nonnull NSString *)name {
      0|   37|    return [QuickTestSuite selectedTestSuiteForTestCaseWithName:name];
      0|   38|}
       |   39|
       |   40|@end

